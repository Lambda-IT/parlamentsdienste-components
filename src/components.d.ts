/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChipType, ComboboxItem, DropdownItem, InputChangeEventDetail, PdColumn, PdModalConfig, PdPlacement, PdSelectOutside, PdStatus, PdTableIconConfiguration, PdTableRow, SelectedEvent, TextFieldTypes } from "./interface";
import { DateOption, Options } from "flatpickr/dist/types/options";
export namespace Components {
    interface PdAlert {
        /**
          * Show action
         */
        "action": boolean;
        /**
          * A link displayed to the right side of the alert
         */
        "actionHref": string;
        /**
          * Target for action href (eg. _blank)
         */
        "actionTarget": string;
        /**
          * Text to show on action
         */
        "actionText": string;
        /**
          * Display an option to close the alert
         */
        "closable": boolean;
        /**
          * Color schema used for the alert
         */
        "color": 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * A headline displayed above the given text
         */
        "headline": string;
        /**
          * Hide alert icon
         */
        "hideIcon": boolean;
    }
    interface PdBackdrop {
        /**
          * Invisible backdrop when set to false
         */
        "visible": boolean;
    }
    interface PdButton {
        /**
          * Color schema used for the button
         */
        "color": 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * Sets button to disbaled state
         */
        "disabled": boolean;
        /**
          * Set href to create a link button
         */
        "href": string;
        "iconLocation": 'left' | 'right' | 'none';
        /**
          * Use outline schema
         */
        "outline": boolean;
        /**
          * Button size
         */
        "size": 'normal' | 'small' | 'large';
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target": string;
        /**
          * Sets button type |text|submit|reset|
         */
        "type": 'button' | 'text' | 'submit';
    }
    interface PdButtonGroup {
    }
    interface PdCheckbox {
        /**
          * Sets check state of the checkbox true/false
         */
        "checked": boolean;
        /**
          * Sets checkbox to disabled state
         */
        "disabled": boolean;
        "error": boolean;
        /**
          * indeterminate state
         */
        "isIndeterminate": boolean;
        /**
          * checkbox name
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Checkbox description text
         */
        "text": string;
        /**
          * value of checkbox
         */
        "value": boolean;
    }
    interface PdChip {
        /**
          * Sets chip to checked state
         */
        "checked": boolean;
        /**
          * Sets chip to disabled state
         */
        "disabled": boolean;
        /**
          * Sets chip to readonly state
         */
        "readonly": boolean;
        /**
          * Sets chip type |text|toggle|filter|
         */
        "type": ChipType;
    }
    interface PdCombobox {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "error": boolean;
        /**
          * Show matching parts in results as highlighted
         */
        "highlight"?: boolean;
        /**
          * Values shown as combobox items
         */
        "items": ComboboxItem[];
        /**
          * combobox box label
         */
        "label"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Reset the selection of the dropdown
         */
        "reset": () => Promise<void>;
        /**
          * If `true`, the combobox get a selected state like a dropdown.
         */
        "selectable": boolean;
        /**
          * Sets focus on the specified `pd-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Set a preselected entry by index
         */
        "setSelectedIndex": (index: number) => Promise<void>;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface PdDatepicker {
        /**
          * Resets the selected dates (if any) and clears the input.
         */
        "clear": () => Promise<void>;
        /**
          * Closes the calendar.
         */
        "close": () => Promise<void>;
        /**
          * Set the configuration for the datepicker (only applied at instantiation) Check out https://flatpickr.js.org/options for further documentation about this config
         */
        "config": Partial<Options>;
        /**
          * Sets the current selected date(s), which can be a date string (using current dateFormat), a Date, or anArray of the Dates.
         */
        "date": DateOption | DateOption[];
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * If `true`, a calendar icon is shown at the end of the input.
         */
        "icon": boolean;
        /**
          * datepicker box label
         */
        "label"?: string;
        /**
          * Shows/opens the calendar.
         */
        "open": () => Promise<void>;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets a config option to value, redrawing the calendar and updating the current view, if necessary.
         */
        "set": (option: "allowInput" | "altFormat" | "altInput" | "altInputClass" | "animate" | "appendTo" | "ariaDateFormat" | "clickOpens" | "closeOnSelect" | "conjunction" | "dateFormat" | "defaultDate" | "defaultHour" | "defaultMinute" | "defaultSeconds" | "disable" | "disableMobile" | "enable" | "enableSeconds" | "enableTime" | "errorHandler" | "formatDate" | "getWeek" | "hourIncrement" | "ignoredFocusElements" | "inline" | "locale" | "maxDate" | "maxTime" | "minDate" | "minTime" | "minuteIncrement" | "mode" | "monthSelectorType" | "nextArrow" | "noCalendar" | "now" | "onChange" | "onClose" | "onDayCreate" | "onDestroy" | "onKeyDown" | "onMonthChange" | "onOpen" | "onParseConfig" | "onReady" | "onValueUpdate" | "onYearChange" | "onPreCalendarPosition" | "parseDate" | "plugins" | "position" | "positionElement" | "prevArrow" | "shorthandCurrentMonth" | "static" | "showMonths" | "time_24hr" | "weekNumbers" | "wrap" | { allowInput?: boolean; altFormat?: string; altInput?: boolean; altInputClass?: string; animate?: boolean; appendTo?: HTMLElement; ariaDateFormat?: string; clickOpens?: boolean; closeOnSelect?: boolean; conjunction?: string; dateFormat?: string; defaultDate?: string | number | Date | DateOption[]; defaultHour?: number; defaultMinute?: number; defaultSeconds?: number; disable?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").DateLimit<DateOption>[]; disableMobile?: boolean; enable?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").DateLimit<DateOption>[]; enableSeconds?: boolean; enableTime?: boolean; errorHandler?: (e: Error) => void; formatDate?: (date: Date, format: string, locale: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/locale").Locale) => string; getWeek?: (date: Date) => string | number; hourIncrement?: number; ignoredFocusElements?: HTMLElement[]; inline?: boolean; locale?: "ar" | "at" | "az" | "be" | "bg" | "bn" | "bs" | "cat" | "cs" | "cy" | "da" | "de" | "default" | "en" | "eo" | "es" | "et" | "fa" | "fi" | "fo" | "fr" | "gr" | "he" | "hi" | "hr" | "hu" | "id" | "is" | "it" | "ja" | "ka" | "ko" | "km" | "kz" | "lt" | "lv" | "mk" | "mn" | "ms" | "my" | "nl" | "no" | "pa" | "pl" | "pt" | "ro" | "ru" | "si" | "sk" | "sl" | "sq" | "sr" | "sv" | "th" | "tr" | "uk" | "vn" | "zh" | "zh_tw" | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/locale").CustomLocale; maxDate?: DateOption; maxTime?: DateOption; minDate?: DateOption; minTime?: DateOption; minuteIncrement?: number; mode?: "single" | "multiple" | "range" | "time"; monthSelectorType?: "static" | "dropdown"; nextArrow?: string; noCalendar?: boolean; now?: DateOption; onChange?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onClose?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onDayCreate?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onDestroy?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onKeyDown?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onMonthChange?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onOpen?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onParseConfig?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onReady?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onValueUpdate?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onYearChange?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; onPreCalendarPosition?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook | import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Hook[]; parseDate?: (date: string, format: string) => Date; plugins?: import("D:/Projects/Parlamentsdienste/componentlibrary/node_modules/flatpickr/dist/types/options").Plugin<{}>[]; position?: "auto" | "above" | "below"; positionElement?: Element; prevArrow?: string; shorthandCurrentMonth?: boolean; static?: boolean; showMonths?: number; time_24hr?: boolean; weekNumbers?: boolean; wrap?: boolean; }, value?: any) => Promise<void>;
        /**
          * Sets the current selected date(s) to date, which can be a date string, a Date, or anArray of the Dates. Optionally, pass true as the second argument to force any onChange events to fire. And if you’re passing a date string with a format other than your dateFormat, provide a dateStrFormat e.g. "m/d/Y"
         */
        "setDate": (date: DateOption | DateOption[], triggerChange?: boolean, format?: string) => Promise<void>;
        /**
          * Shows/opens the calendar if its closed, hides/closes it otherwise.
         */
        "toggle": () => Promise<void>;
    }
    interface PdDropdown {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Enable selection of an empty item
         */
        "emptyItem": boolean;
        /**
          * Data used for the empty item
         */
        "emptyItemData": DropdownItem;
        "error": boolean;
        /**
          * Items visible in dropdown
         */
        "itemCount": number;
        /**
          * Items to display and select in dropdown
         */
        "items": DropdownItem[];
        /**
          * Dropdown box label
         */
        "label"?: string;
        /**
          * Placeholder when no item is selected
         */
        "placeholder": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Reset the selection of the dropdown
         */
        "reset": () => Promise<void>;
        /**
          * Set a preselected entry by index
         */
        "setSelectedIndex": (index: number) => Promise<void>;
    }
    interface PdDropdownItem {
        /**
          * Find an highlight this text in value
         */
        "highlight"?: string | number;
        /**
          * Sets this item to selected
         */
        "selected": boolean;
        /**
          * Value for this item
         */
        "value": string;
    }
    interface PdIcon {
        /**
          * Flip in X/Y direction
         */
        "flip": 'x' | 'y' | 'xy';
        /**
          * Name of an icon from the provided gallery
         */
        "name"?: string;
        /**
          * Rotation in 'deg'
         */
        "rotate": number;
        /**
          * Size of the icon in 'rem'
         */
        "size"?: number;
        /**
          * Spin animation in ms per rotation
         */
        "spin": number;
        /**
          * change animation direction
         */
        "spinReverse": boolean;
        /**
          * Specifies the `src` url of an SVG file to use.
         */
        "src"?: string;
    }
    interface PdInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": 'on' | 'off';
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "error": boolean;
        "helperText"?: string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `pd-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface PdList {
    }
    interface PdListItem {
        /**
          * Status icon for list item
         */
        "status": PdStatus;
    }
    interface PdListItemExpandable {
        /**
          * Expands / collapses the panel content
         */
        "collapsed": boolean;
        /**
          * Status icon for list item
         */
        "status": PdStatus;
    }
    interface PdMenu {
        /**
          * Close menu
         */
        "close": () => Promise<void>;
        /**
          * Switch dark colors to bright font color
         */
        "invertColor": boolean;
        /**
          * Items to display and select in dropdown
         */
        "items": any[];
        /**
          * Label nearby to the dot menu icon
         */
        "label": string;
        /**
          * Open menu
         */
        "open": () => Promise<void>;
        /**
          * Prefered placement of menu dropdown
         */
        "placement": PdPlacement;
    }
    interface PdMenuItem {
        /**
          * Text for this item
         */
        "text": string;
    }
    interface PdModal {
        /**
          * Configuration properties
         */
        "config": PdModalConfig;
    }
    interface PdNavbar {
        "mobileBreakpoint": number;
    }
    interface PdNavbarItem {
        "enabled": boolean;
        /**
          * Set href to create a link button
         */
        "href": string;
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target": string;
        "text": string;
    }
    interface PdPagination {
        /**
          * Current page number
         */
        "currentPage": number;
        /**
          * separator string in simple mode
         */
        "separator": string;
        /**
          * switch between pagination mode (simple with separator/page buttons)
         */
        "showPageButtons": boolean;
        /**
          * Number of pages
         */
        "totalPages": number;
        /**
          * visible pages in 'shopPageButtons' mode
         */
        "visiblePages": number;
    }
    interface PdPanel {
        /**
          * Expands / collapses the panel content
         */
        "collapsed": boolean;
        /**
          * Show/hide collapse button
         */
        "collapsible": boolean;
    }
    interface PdPanelContent {
    }
    interface PdPanelFooter {
    }
    interface PdPanelHeader {
    }
    interface PdProgressBar {
        /**
          * status color of progress-bar
         */
        "color": 'primary' | 'success' | 'danger' | 'warning' | 'info';
        /**
          * decimals of value
         */
        "decimals": number;
        /**
          * description of progress-bar
         */
        "label": boolean;
        /**
          * show striped version of progress-bar
         */
        "striped": boolean;
        /**
          * current value of progress bar 0.0 to 1.0
         */
        "value": number;
    }
    interface PdRadio {
        /**
          * Checks radio
         */
        "checked": boolean;
        /**
          * Sets radio to disabled state
         */
        "disabled": boolean;
        /**
          * Label used by radio
         */
        "label"?: string | null;
        /**
          * Name of radio. Used to group radios together
         */
        "name": string;
        /**
          * Value of radio
         */
        "value"?: any | null;
    }
    interface PdSearch {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Show matching parts in resuls as highlighted
         */
        "highlight"?: boolean;
        /**
          * Search box label
         */
        "label"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * Values shown as search results
         */
        "results": string[];
        /**
          * Sets focus on the specified `pd-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface PdSidebar {
    }
    interface PdSidebarItem {
        /**
          * show an item as active
         */
        "active": boolean;
        /**
          * Set href to create a link button
         */
        "href": string;
        /**
          * Path to an svg asset
         */
        "icon": string;
        /**
          * Name of an icon from the library
         */
        "iconName": string;
        /**
          * Icon size
         */
        "size": number;
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target": string;
        /**
          * Item text
         */
        "text": string;
    }
    interface PdSlider {
        /**
          * max value
         */
        "max": number;
        /**
          * min value
         */
        "min": number;
        /**
          * slider name
         */
        "name": string;
        /**
          * value steps
         */
        "step": number;
        /**
          * slider value
         */
        "value"?: number | null;
    }
    interface PdTable {
        /**
          * A definition for each column of the table
         */
        "columns": PdColumn[];
        /**
          * Height of header cells
         */
        "headerHeight": string;
        /**
          * The table style
         */
        "headerStyle": 'light' | 'dark' | 'gray';
        /**
          * The configuration for the last column, the icon column
         */
        "iconConfig"?: PdTableIconConfiguration;
        "menuLabel": string;
        /**
          * The minimum width the table should take
         */
        "minWidth": string;
        /**
          * Height of rows
         */
        "rowHeight": string;
        /**
          * The data definition for each row to display
         */
        "rows": PdTableRow[];
        /**
          * Make rows selectable with a checkbox
         */
        "selectable": boolean;
        /**
          * Indicates the state of rows outside of the table context. Sets the 'selectAll' checkbox accordingly
         */
        "selectedOutside": PdSelectOutside;
        /**
          * Show button column and context menu
         */
        "showActionColumn": boolean;
        /**
          * Allow to render a status icon per row
         */
        "showStatus": boolean;
        "unselectAll": () => Promise<void>;
    }
    interface PdTableFilter {
        "focusInput": () => Promise<void>;
        "reset": () => Promise<void>;
        "setValue": (value: string) => Promise<void>;
        /**
          * filter value
         */
        "value": string;
    }
    interface PdTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow": boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        "error": boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * Sets focus on the native `textarea` in `pd-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface PdTimeline {
        /**
          * Adds rounded bottom of the date line to indicate that the timeline ends here
         */
        "end": boolean;
        /**
          * Adds rounded top of the date line to indicate that the timeline starts here
         */
        "start": boolean;
    }
    interface PdTimelineDate {
        /**
          * Timeline date
         */
        "date": string;
        /**
          * Header text
         */
        "header": string;
        /**
          * Header link location
         */
        "href": string;
        /**
          * Header link target
         */
        "target": string;
    }
    interface PdToast {
        /**
          * The Toast title
         */
        "header": string;
        /**
          * Additional toast information (e.g. 11 minutes ago)
         */
        "info": string;
        /**
          * Changes max-with of the toast
         */
        "size": 'small' | 'large';
    }
}
declare global {
    interface HTMLPdAlertElement extends Components.PdAlert, HTMLStencilElement {
    }
    var HTMLPdAlertElement: {
        prototype: HTMLPdAlertElement;
        new (): HTMLPdAlertElement;
    };
    interface HTMLPdBackdropElement extends Components.PdBackdrop, HTMLStencilElement {
    }
    var HTMLPdBackdropElement: {
        prototype: HTMLPdBackdropElement;
        new (): HTMLPdBackdropElement;
    };
    interface HTMLPdButtonElement extends Components.PdButton, HTMLStencilElement {
    }
    var HTMLPdButtonElement: {
        prototype: HTMLPdButtonElement;
        new (): HTMLPdButtonElement;
    };
    interface HTMLPdButtonGroupElement extends Components.PdButtonGroup, HTMLStencilElement {
    }
    var HTMLPdButtonGroupElement: {
        prototype: HTMLPdButtonGroupElement;
        new (): HTMLPdButtonGroupElement;
    };
    interface HTMLPdCheckboxElement extends Components.PdCheckbox, HTMLStencilElement {
    }
    var HTMLPdCheckboxElement: {
        prototype: HTMLPdCheckboxElement;
        new (): HTMLPdCheckboxElement;
    };
    interface HTMLPdChipElement extends Components.PdChip, HTMLStencilElement {
    }
    var HTMLPdChipElement: {
        prototype: HTMLPdChipElement;
        new (): HTMLPdChipElement;
    };
    interface HTMLPdComboboxElement extends Components.PdCombobox, HTMLStencilElement {
    }
    var HTMLPdComboboxElement: {
        prototype: HTMLPdComboboxElement;
        new (): HTMLPdComboboxElement;
    };
    interface HTMLPdDatepickerElement extends Components.PdDatepicker, HTMLStencilElement {
    }
    var HTMLPdDatepickerElement: {
        prototype: HTMLPdDatepickerElement;
        new (): HTMLPdDatepickerElement;
    };
    interface HTMLPdDropdownElement extends Components.PdDropdown, HTMLStencilElement {
    }
    var HTMLPdDropdownElement: {
        prototype: HTMLPdDropdownElement;
        new (): HTMLPdDropdownElement;
    };
    interface HTMLPdDropdownItemElement extends Components.PdDropdownItem, HTMLStencilElement {
    }
    var HTMLPdDropdownItemElement: {
        prototype: HTMLPdDropdownItemElement;
        new (): HTMLPdDropdownItemElement;
    };
    interface HTMLPdIconElement extends Components.PdIcon, HTMLStencilElement {
    }
    var HTMLPdIconElement: {
        prototype: HTMLPdIconElement;
        new (): HTMLPdIconElement;
    };
    interface HTMLPdInputElement extends Components.PdInput, HTMLStencilElement {
    }
    var HTMLPdInputElement: {
        prototype: HTMLPdInputElement;
        new (): HTMLPdInputElement;
    };
    interface HTMLPdListElement extends Components.PdList, HTMLStencilElement {
    }
    var HTMLPdListElement: {
        prototype: HTMLPdListElement;
        new (): HTMLPdListElement;
    };
    interface HTMLPdListItemElement extends Components.PdListItem, HTMLStencilElement {
    }
    var HTMLPdListItemElement: {
        prototype: HTMLPdListItemElement;
        new (): HTMLPdListItemElement;
    };
    interface HTMLPdListItemExpandableElement extends Components.PdListItemExpandable, HTMLStencilElement {
    }
    var HTMLPdListItemExpandableElement: {
        prototype: HTMLPdListItemExpandableElement;
        new (): HTMLPdListItemExpandableElement;
    };
    interface HTMLPdMenuElement extends Components.PdMenu, HTMLStencilElement {
    }
    var HTMLPdMenuElement: {
        prototype: HTMLPdMenuElement;
        new (): HTMLPdMenuElement;
    };
    interface HTMLPdMenuItemElement extends Components.PdMenuItem, HTMLStencilElement {
    }
    var HTMLPdMenuItemElement: {
        prototype: HTMLPdMenuItemElement;
        new (): HTMLPdMenuItemElement;
    };
    interface HTMLPdModalElement extends Components.PdModal, HTMLStencilElement {
    }
    var HTMLPdModalElement: {
        prototype: HTMLPdModalElement;
        new (): HTMLPdModalElement;
    };
    interface HTMLPdNavbarElement extends Components.PdNavbar, HTMLStencilElement {
    }
    var HTMLPdNavbarElement: {
        prototype: HTMLPdNavbarElement;
        new (): HTMLPdNavbarElement;
    };
    interface HTMLPdNavbarItemElement extends Components.PdNavbarItem, HTMLStencilElement {
    }
    var HTMLPdNavbarItemElement: {
        prototype: HTMLPdNavbarItemElement;
        new (): HTMLPdNavbarItemElement;
    };
    interface HTMLPdPaginationElement extends Components.PdPagination, HTMLStencilElement {
    }
    var HTMLPdPaginationElement: {
        prototype: HTMLPdPaginationElement;
        new (): HTMLPdPaginationElement;
    };
    interface HTMLPdPanelElement extends Components.PdPanel, HTMLStencilElement {
    }
    var HTMLPdPanelElement: {
        prototype: HTMLPdPanelElement;
        new (): HTMLPdPanelElement;
    };
    interface HTMLPdPanelContentElement extends Components.PdPanelContent, HTMLStencilElement {
    }
    var HTMLPdPanelContentElement: {
        prototype: HTMLPdPanelContentElement;
        new (): HTMLPdPanelContentElement;
    };
    interface HTMLPdPanelFooterElement extends Components.PdPanelFooter, HTMLStencilElement {
    }
    var HTMLPdPanelFooterElement: {
        prototype: HTMLPdPanelFooterElement;
        new (): HTMLPdPanelFooterElement;
    };
    interface HTMLPdPanelHeaderElement extends Components.PdPanelHeader, HTMLStencilElement {
    }
    var HTMLPdPanelHeaderElement: {
        prototype: HTMLPdPanelHeaderElement;
        new (): HTMLPdPanelHeaderElement;
    };
    interface HTMLPdProgressBarElement extends Components.PdProgressBar, HTMLStencilElement {
    }
    var HTMLPdProgressBarElement: {
        prototype: HTMLPdProgressBarElement;
        new (): HTMLPdProgressBarElement;
    };
    interface HTMLPdRadioElement extends Components.PdRadio, HTMLStencilElement {
    }
    var HTMLPdRadioElement: {
        prototype: HTMLPdRadioElement;
        new (): HTMLPdRadioElement;
    };
    interface HTMLPdSearchElement extends Components.PdSearch, HTMLStencilElement {
    }
    var HTMLPdSearchElement: {
        prototype: HTMLPdSearchElement;
        new (): HTMLPdSearchElement;
    };
    interface HTMLPdSidebarElement extends Components.PdSidebar, HTMLStencilElement {
    }
    var HTMLPdSidebarElement: {
        prototype: HTMLPdSidebarElement;
        new (): HTMLPdSidebarElement;
    };
    interface HTMLPdSidebarItemElement extends Components.PdSidebarItem, HTMLStencilElement {
    }
    var HTMLPdSidebarItemElement: {
        prototype: HTMLPdSidebarItemElement;
        new (): HTMLPdSidebarItemElement;
    };
    interface HTMLPdSliderElement extends Components.PdSlider, HTMLStencilElement {
    }
    var HTMLPdSliderElement: {
        prototype: HTMLPdSliderElement;
        new (): HTMLPdSliderElement;
    };
    interface HTMLPdTableElement extends Components.PdTable, HTMLStencilElement {
    }
    var HTMLPdTableElement: {
        prototype: HTMLPdTableElement;
        new (): HTMLPdTableElement;
    };
    interface HTMLPdTableFilterElement extends Components.PdTableFilter, HTMLStencilElement {
    }
    var HTMLPdTableFilterElement: {
        prototype: HTMLPdTableFilterElement;
        new (): HTMLPdTableFilterElement;
    };
    interface HTMLPdTextareaElement extends Components.PdTextarea, HTMLStencilElement {
    }
    var HTMLPdTextareaElement: {
        prototype: HTMLPdTextareaElement;
        new (): HTMLPdTextareaElement;
    };
    interface HTMLPdTimelineElement extends Components.PdTimeline, HTMLStencilElement {
    }
    var HTMLPdTimelineElement: {
        prototype: HTMLPdTimelineElement;
        new (): HTMLPdTimelineElement;
    };
    interface HTMLPdTimelineDateElement extends Components.PdTimelineDate, HTMLStencilElement {
    }
    var HTMLPdTimelineDateElement: {
        prototype: HTMLPdTimelineDateElement;
        new (): HTMLPdTimelineDateElement;
    };
    interface HTMLPdToastElement extends Components.PdToast, HTMLStencilElement {
    }
    var HTMLPdToastElement: {
        prototype: HTMLPdToastElement;
        new (): HTMLPdToastElement;
    };
    interface HTMLElementTagNameMap {
        "pd-alert": HTMLPdAlertElement;
        "pd-backdrop": HTMLPdBackdropElement;
        "pd-button": HTMLPdButtonElement;
        "pd-button-group": HTMLPdButtonGroupElement;
        "pd-checkbox": HTMLPdCheckboxElement;
        "pd-chip": HTMLPdChipElement;
        "pd-combobox": HTMLPdComboboxElement;
        "pd-datepicker": HTMLPdDatepickerElement;
        "pd-dropdown": HTMLPdDropdownElement;
        "pd-dropdown-item": HTMLPdDropdownItemElement;
        "pd-icon": HTMLPdIconElement;
        "pd-input": HTMLPdInputElement;
        "pd-list": HTMLPdListElement;
        "pd-list-item": HTMLPdListItemElement;
        "pd-list-item-expandable": HTMLPdListItemExpandableElement;
        "pd-menu": HTMLPdMenuElement;
        "pd-menu-item": HTMLPdMenuItemElement;
        "pd-modal": HTMLPdModalElement;
        "pd-navbar": HTMLPdNavbarElement;
        "pd-navbar-item": HTMLPdNavbarItemElement;
        "pd-pagination": HTMLPdPaginationElement;
        "pd-panel": HTMLPdPanelElement;
        "pd-panel-content": HTMLPdPanelContentElement;
        "pd-panel-footer": HTMLPdPanelFooterElement;
        "pd-panel-header": HTMLPdPanelHeaderElement;
        "pd-progress-bar": HTMLPdProgressBarElement;
        "pd-radio": HTMLPdRadioElement;
        "pd-search": HTMLPdSearchElement;
        "pd-sidebar": HTMLPdSidebarElement;
        "pd-sidebar-item": HTMLPdSidebarItemElement;
        "pd-slider": HTMLPdSliderElement;
        "pd-table": HTMLPdTableElement;
        "pd-table-filter": HTMLPdTableFilterElement;
        "pd-textarea": HTMLPdTextareaElement;
        "pd-timeline": HTMLPdTimelineElement;
        "pd-timeline-date": HTMLPdTimelineDateElement;
        "pd-toast": HTMLPdToastElement;
    }
}
declare namespace LocalJSX {
    interface PdAlert {
        /**
          * Show action
         */
        "action"?: boolean;
        /**
          * A link displayed to the right side of the alert
         */
        "actionHref"?: string;
        /**
          * Target for action href (eg. _blank)
         */
        "actionTarget"?: string;
        /**
          * Text to show on action
         */
        "actionText"?: string;
        /**
          * Display an option to close the alert
         */
        "closable"?: boolean;
        /**
          * Color schema used for the alert
         */
        "color"?: 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * A headline displayed above the given text
         */
        "headline"?: string;
        /**
          * Hide alert icon
         */
        "hideIcon"?: boolean;
        /**
          * Emitted when action closed button was pressed.
         */
        "onPd-closed"?: (event: CustomEvent<MouseEvent>) => void;
    }
    interface PdBackdrop {
        "onPd-tap"?: (event: CustomEvent<void>) => void;
        /**
          * Invisible backdrop when set to false
         */
        "visible"?: boolean;
    }
    interface PdButton {
        /**
          * Color schema used for the button
         */
        "color"?: 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * Sets button to disbaled state
         */
        "disabled"?: boolean;
        /**
          * Set href to create a link button
         */
        "href"?: string;
        "iconLocation"?: 'left' | 'right' | 'none';
        /**
          * Use outline schema
         */
        "outline"?: boolean;
        /**
          * Button size
         */
        "size"?: 'normal' | 'small' | 'large';
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target"?: string;
        /**
          * Sets button type |text|submit|reset|
         */
        "type"?: 'button' | 'text' | 'submit';
    }
    interface PdButtonGroup {
    }
    interface PdCheckbox {
        /**
          * Sets check state of the checkbox true/false
         */
        "checked"?: boolean;
        /**
          * Sets checkbox to disabled state
         */
        "disabled"?: boolean;
        "error"?: boolean;
        /**
          * indeterminate state
         */
        "isIndeterminate"?: boolean;
        /**
          * checkbox name
         */
        "name"?: string;
        "onPd-checked"?: (event: CustomEvent<boolean>) => void;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * Checkbox description text
         */
        "text"?: string;
        /**
          * value of checkbox
         */
        "value"?: boolean;
    }
    interface PdChip {
        /**
          * Sets chip to checked state
         */
        "checked"?: boolean;
        /**
          * Sets chip to disabled state
         */
        "disabled"?: boolean;
        /**
          * Event for check chip
         */
        "onCheckChip"?: (event: CustomEvent<any>) => void;
        /**
          * Event for clicking the cross to remove a chip
         */
        "onRemoveChip"?: (event: CustomEvent<any>) => void;
        /**
          * Sets chip to readonly state
         */
        "readonly"?: boolean;
        /**
          * Sets chip type |text|toggle|filter|
         */
        "type"?: ChipType;
    }
    interface PdCombobox {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "error"?: boolean;
        /**
          * Show matching parts in results as highlighted
         */
        "highlight"?: boolean;
        /**
          * Values shown as combobox items
         */
        "items"?: ComboboxItem[];
        /**
          * combobox box label
         */
        "label"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPd-blur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onPd-change"?: (event: CustomEvent<ComboboxItem>) => void;
        /**
          * Emitted when a combobox request occurred.
         */
        "onPd-combobox"?: (event: CustomEvent<ComboboxItem>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPd-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onPd-input"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * If `true`, the combobox get a selected state like a dropdown.
         */
        "selectable"?: boolean;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface PdDatepicker {
        /**
          * Set the configuration for the datepicker (only applied at instantiation) Check out https://flatpickr.js.org/options for further documentation about this config
         */
        "config"?: Partial<Options>;
        /**
          * Sets the current selected date(s), which can be a date string (using current dateFormat), a Date, or anArray of the Dates.
         */
        "date"?: DateOption | DateOption[];
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * If `true`, a calendar icon is shown at the end of the input.
         */
        "icon"?: boolean;
        /**
          * datepicker box label
         */
        "label"?: string;
        "onPd-change"?: (event: CustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-close"?: (event: CustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-month-change"?: (event: CustomEvent<{
        selectedDates: Date[];
        dateStr: string;
    }>) => void;
        "onPd-open"?: (event: CustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-ready"?: (event: CustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-value-update"?: (event: CustomEvent<{
        selectedDates: Date[];
        dateStr: string;
    }>) => void;
        "onPd-year-change"?: (event: CustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
    }
    interface PdDropdown {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Enable selection of an empty item
         */
        "emptyItem"?: boolean;
        /**
          * Data used for the empty item
         */
        "emptyItemData"?: DropdownItem;
        "error"?: boolean;
        /**
          * Items visible in dropdown
         */
        "itemCount"?: number;
        /**
          * Items to display and select in dropdown
         */
        "items"?: DropdownItem[];
        /**
          * Dropdown box label
         */
        "label"?: string;
        "onPd-change"?: (event: CustomEvent<DropdownItem>) => void;
        /**
          * Placeholder when no item is selected
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
    }
    interface PdDropdownItem {
        /**
          * Find an highlight this text in value
         */
        "highlight"?: string | number;
        /**
          * Sets this item to selected
         */
        "selected"?: boolean;
        /**
          * Value for this item
         */
        "value"?: string;
    }
    interface PdIcon {
        /**
          * Flip in X/Y direction
         */
        "flip"?: 'x' | 'y' | 'xy';
        /**
          * Name of an icon from the provided gallery
         */
        "name"?: string;
        /**
          * Rotation in 'deg'
         */
        "rotate"?: number;
        /**
          * Size of the icon in 'rem'
         */
        "size"?: number;
        /**
          * Spin animation in ms per rotation
         */
        "spin"?: number;
        /**
          * change animation direction
         */
        "spinReverse"?: boolean;
        /**
          * Specifies the `src` url of an SVG file to use.
         */
        "src"?: string;
    }
    interface PdInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "error"?: boolean;
        "helperText"?: string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPd-blur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onPd-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPd-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onPd-input"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface PdList {
    }
    interface PdListItem {
        /**
          * Status icon for list item
         */
        "status"?: PdStatus;
    }
    interface PdListItemExpandable {
        /**
          * Expands / collapses the panel content
         */
        "collapsed"?: boolean;
        /**
          * Status icon for list item
         */
        "status"?: PdStatus;
    }
    interface PdMenu {
        /**
          * Switch dark colors to bright font color
         */
        "invertColor"?: boolean;
        /**
          * Items to display and select in dropdown
         */
        "items"?: any[];
        /**
          * Label nearby to the dot menu icon
         */
        "label"?: string;
        /**
          * Prefered placement of menu dropdown
         */
        "placement"?: PdPlacement;
    }
    interface PdMenuItem {
        /**
          * Text for this item
         */
        "text"?: string;
    }
    interface PdModal {
        /**
          * Configuration properties
         */
        "config"?: PdModalConfig;
        /**
          * Event that will be executed when the modal backdrop is clicked
         */
        "onPd-backdrop"?: (event: CustomEvent<void>) => void;
        /**
          * Event that will be executed when the is closed
         */
        "onPd-closed"?: (event: CustomEvent<void>) => void;
        /**
          * Event that will be executed when the escape button was clicked
         */
        "onPd-escape"?: (event: CustomEvent<void>) => void;
    }
    interface PdNavbar {
        "mobileBreakpoint"?: number;
        "onPd-menu"?: (event: CustomEvent<void>) => void;
    }
    interface PdNavbarItem {
        "enabled"?: boolean;
        /**
          * Set href to create a link button
         */
        "href"?: string;
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target"?: string;
        "text"?: string;
    }
    interface PdPagination {
        /**
          * Current page number
         */
        "currentPage"?: number;
        /**
          * Page change event. Returns selected page
         */
        "onPd-change"?: (event: CustomEvent<number>) => void;
        /**
          * separator string in simple mode
         */
        "separator"?: string;
        /**
          * switch between pagination mode (simple with separator/page buttons)
         */
        "showPageButtons"?: boolean;
        /**
          * Number of pages
         */
        "totalPages"?: number;
        /**
          * visible pages in 'shopPageButtons' mode
         */
        "visiblePages"?: number;
    }
    interface PdPanel {
        /**
          * Expands / collapses the panel content
         */
        "collapsed"?: boolean;
        /**
          * Show/hide collapse button
         */
        "collapsible"?: boolean;
        /**
          * Emitted when the value has changed.
         */
        "onPd-collapsed"?: (event: CustomEvent<any>) => void;
    }
    interface PdPanelContent {
    }
    interface PdPanelFooter {
    }
    interface PdPanelHeader {
    }
    interface PdProgressBar {
        /**
          * status color of progress-bar
         */
        "color"?: 'primary' | 'success' | 'danger' | 'warning' | 'info';
        /**
          * decimals of value
         */
        "decimals"?: number;
        /**
          * description of progress-bar
         */
        "label"?: boolean;
        /**
          * show striped version of progress-bar
         */
        "striped"?: boolean;
        /**
          * current value of progress bar 0.0 to 1.0
         */
        "value"?: number;
    }
    interface PdRadio {
        /**
          * Checks radio
         */
        "checked"?: boolean;
        /**
          * Sets radio to disabled state
         */
        "disabled"?: boolean;
        /**
          * Label used by radio
         */
        "label"?: string | null;
        /**
          * Name of radio. Used to group radios together
         */
        "name"?: string;
        /**
          * Value of radio
         */
        "value"?: any | null;
    }
    interface PdSearch {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Show matching parts in resuls as highlighted
         */
        "highlight"?: boolean;
        /**
          * Search box label
         */
        "label"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPd-blur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onPd-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPd-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onPd-input"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when a search request occurred.
         */
        "onPd-search"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * Values shown as search results
         */
        "results"?: string[];
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface PdSidebar {
    }
    interface PdSidebarItem {
        /**
          * show an item as active
         */
        "active"?: boolean;
        /**
          * Set href to create a link button
         */
        "href"?: string;
        /**
          * Path to an svg asset
         */
        "icon"?: string;
        /**
          * Name of an icon from the library
         */
        "iconName"?: string;
        /**
          * Icon size
         */
        "size"?: number;
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target"?: string;
        /**
          * Item text
         */
        "text"?: string;
    }
    interface PdSlider {
        /**
          * max value
         */
        "max"?: number;
        /**
          * min value
         */
        "min"?: number;
        /**
          * slider name
         */
        "name"?: string;
        /**
          * Emitted when slider has been released.
         */
        "onPd-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onPd-input"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * value steps
         */
        "step"?: number;
        /**
          * slider value
         */
        "value"?: number | null;
    }
    interface PdTable {
        /**
          * A definition for each column of the table
         */
        "columns"?: PdColumn[];
        /**
          * Height of header cells
         */
        "headerHeight"?: string;
        /**
          * The table style
         */
        "headerStyle"?: 'light' | 'dark' | 'gray';
        /**
          * The configuration for the last column, the icon column
         */
        "iconConfig"?: PdTableIconConfiguration;
        "menuLabel"?: string;
        /**
          * The minimum width the table should take
         */
        "minWidth"?: string;
        /**
          * Triggers an event when row was clicked
         */
        "onPd-clicked-row"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers an event when the delete icon was clicked
         */
        "onPd-delete"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers an event when the edit icon was clicked
         */
        "onPd-edit"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers when one or all rows get selected
         */
        "onPd-selected"?: (event: CustomEvent<SelectedEvent>) => void;
        /**
          * Triggers an event when the view icon was clicked
         */
        "onPd-view"?: (event: CustomEvent<any>) => void;
        /**
          * Height of rows
         */
        "rowHeight"?: string;
        /**
          * The data definition for each row to display
         */
        "rows"?: PdTableRow[];
        /**
          * Make rows selectable with a checkbox
         */
        "selectable"?: boolean;
        /**
          * Indicates the state of rows outside of the table context. Sets the 'selectAll' checkbox accordingly
         */
        "selectedOutside"?: PdSelectOutside;
        /**
          * Show button column and context menu
         */
        "showActionColumn"?: boolean;
        /**
          * Allow to render a status icon per row
         */
        "showStatus"?: boolean;
    }
    interface PdTableFilter {
        /**
          * Emitted when filter is confirmed.
         */
        "onPdClose"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when filter is confirmed.
         */
        "onPdConfirm"?: (event: CustomEvent<string>) => void;
        /**
          * Emitted when filter changes.
         */
        "onPdSearch"?: (event: CustomEvent<void>) => void;
        /**
          * filter value
         */
        "value"?: string;
    }
    interface PdTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow"?: boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        "error"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Emitted when the input loses focus.
         */
        "onPdBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onPdChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPdFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onPdInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface PdTimeline {
        /**
          * Adds rounded bottom of the date line to indicate that the timeline ends here
         */
        "end"?: boolean;
        /**
          * Adds rounded top of the date line to indicate that the timeline starts here
         */
        "start"?: boolean;
    }
    interface PdTimelineDate {
        /**
          * Timeline date
         */
        "date"?: string;
        /**
          * Header text
         */
        "header"?: string;
        /**
          * Header link location
         */
        "href"?: string;
        /**
          * Header link target
         */
        "target"?: string;
    }
    interface PdToast {
        /**
          * The Toast title
         */
        "header"?: string;
        /**
          * Additional toast information (e.g. 11 minutes ago)
         */
        "info"?: string;
        /**
          * When closing the toast using the close icon
         */
        "onPd-closed"?: (event: CustomEvent<any>) => void;
        /**
          * Changes max-with of the toast
         */
        "size"?: 'small' | 'large';
    }
    interface IntrinsicElements {
        "pd-alert": PdAlert;
        "pd-backdrop": PdBackdrop;
        "pd-button": PdButton;
        "pd-button-group": PdButtonGroup;
        "pd-checkbox": PdCheckbox;
        "pd-chip": PdChip;
        "pd-combobox": PdCombobox;
        "pd-datepicker": PdDatepicker;
        "pd-dropdown": PdDropdown;
        "pd-dropdown-item": PdDropdownItem;
        "pd-icon": PdIcon;
        "pd-input": PdInput;
        "pd-list": PdList;
        "pd-list-item": PdListItem;
        "pd-list-item-expandable": PdListItemExpandable;
        "pd-menu": PdMenu;
        "pd-menu-item": PdMenuItem;
        "pd-modal": PdModal;
        "pd-navbar": PdNavbar;
        "pd-navbar-item": PdNavbarItem;
        "pd-pagination": PdPagination;
        "pd-panel": PdPanel;
        "pd-panel-content": PdPanelContent;
        "pd-panel-footer": PdPanelFooter;
        "pd-panel-header": PdPanelHeader;
        "pd-progress-bar": PdProgressBar;
        "pd-radio": PdRadio;
        "pd-search": PdSearch;
        "pd-sidebar": PdSidebar;
        "pd-sidebar-item": PdSidebarItem;
        "pd-slider": PdSlider;
        "pd-table": PdTable;
        "pd-table-filter": PdTableFilter;
        "pd-textarea": PdTextarea;
        "pd-timeline": PdTimeline;
        "pd-timeline-date": PdTimelineDate;
        "pd-toast": PdToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pd-alert": LocalJSX.PdAlert & JSXBase.HTMLAttributes<HTMLPdAlertElement>;
            "pd-backdrop": LocalJSX.PdBackdrop & JSXBase.HTMLAttributes<HTMLPdBackdropElement>;
            "pd-button": LocalJSX.PdButton & JSXBase.HTMLAttributes<HTMLPdButtonElement>;
            "pd-button-group": LocalJSX.PdButtonGroup & JSXBase.HTMLAttributes<HTMLPdButtonGroupElement>;
            "pd-checkbox": LocalJSX.PdCheckbox & JSXBase.HTMLAttributes<HTMLPdCheckboxElement>;
            "pd-chip": LocalJSX.PdChip & JSXBase.HTMLAttributes<HTMLPdChipElement>;
            "pd-combobox": LocalJSX.PdCombobox & JSXBase.HTMLAttributes<HTMLPdComboboxElement>;
            "pd-datepicker": LocalJSX.PdDatepicker & JSXBase.HTMLAttributes<HTMLPdDatepickerElement>;
            "pd-dropdown": LocalJSX.PdDropdown & JSXBase.HTMLAttributes<HTMLPdDropdownElement>;
            "pd-dropdown-item": LocalJSX.PdDropdownItem & JSXBase.HTMLAttributes<HTMLPdDropdownItemElement>;
            "pd-icon": LocalJSX.PdIcon & JSXBase.HTMLAttributes<HTMLPdIconElement>;
            "pd-input": LocalJSX.PdInput & JSXBase.HTMLAttributes<HTMLPdInputElement>;
            "pd-list": LocalJSX.PdList & JSXBase.HTMLAttributes<HTMLPdListElement>;
            "pd-list-item": LocalJSX.PdListItem & JSXBase.HTMLAttributes<HTMLPdListItemElement>;
            "pd-list-item-expandable": LocalJSX.PdListItemExpandable & JSXBase.HTMLAttributes<HTMLPdListItemExpandableElement>;
            "pd-menu": LocalJSX.PdMenu & JSXBase.HTMLAttributes<HTMLPdMenuElement>;
            "pd-menu-item": LocalJSX.PdMenuItem & JSXBase.HTMLAttributes<HTMLPdMenuItemElement>;
            "pd-modal": LocalJSX.PdModal & JSXBase.HTMLAttributes<HTMLPdModalElement>;
            "pd-navbar": LocalJSX.PdNavbar & JSXBase.HTMLAttributes<HTMLPdNavbarElement>;
            "pd-navbar-item": LocalJSX.PdNavbarItem & JSXBase.HTMLAttributes<HTMLPdNavbarItemElement>;
            "pd-pagination": LocalJSX.PdPagination & JSXBase.HTMLAttributes<HTMLPdPaginationElement>;
            "pd-panel": LocalJSX.PdPanel & JSXBase.HTMLAttributes<HTMLPdPanelElement>;
            "pd-panel-content": LocalJSX.PdPanelContent & JSXBase.HTMLAttributes<HTMLPdPanelContentElement>;
            "pd-panel-footer": LocalJSX.PdPanelFooter & JSXBase.HTMLAttributes<HTMLPdPanelFooterElement>;
            "pd-panel-header": LocalJSX.PdPanelHeader & JSXBase.HTMLAttributes<HTMLPdPanelHeaderElement>;
            "pd-progress-bar": LocalJSX.PdProgressBar & JSXBase.HTMLAttributes<HTMLPdProgressBarElement>;
            "pd-radio": LocalJSX.PdRadio & JSXBase.HTMLAttributes<HTMLPdRadioElement>;
            "pd-search": LocalJSX.PdSearch & JSXBase.HTMLAttributes<HTMLPdSearchElement>;
            "pd-sidebar": LocalJSX.PdSidebar & JSXBase.HTMLAttributes<HTMLPdSidebarElement>;
            "pd-sidebar-item": LocalJSX.PdSidebarItem & JSXBase.HTMLAttributes<HTMLPdSidebarItemElement>;
            "pd-slider": LocalJSX.PdSlider & JSXBase.HTMLAttributes<HTMLPdSliderElement>;
            "pd-table": LocalJSX.PdTable & JSXBase.HTMLAttributes<HTMLPdTableElement>;
            "pd-table-filter": LocalJSX.PdTableFilter & JSXBase.HTMLAttributes<HTMLPdTableFilterElement>;
            "pd-textarea": LocalJSX.PdTextarea & JSXBase.HTMLAttributes<HTMLPdTextareaElement>;
            "pd-timeline": LocalJSX.PdTimeline & JSXBase.HTMLAttributes<HTMLPdTimelineElement>;
            "pd-timeline-date": LocalJSX.PdTimelineDate & JSXBase.HTMLAttributes<HTMLPdTimelineDateElement>;
            "pd-toast": LocalJSX.PdToast & JSXBase.HTMLAttributes<HTMLPdToastElement>;
        }
    }
}
