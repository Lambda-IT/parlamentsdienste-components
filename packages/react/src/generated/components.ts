'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type ComboboxItem, type DropdownItem, type InputChangeEventDetail, type PdAlertCustomEvent, type PdComboboxCustomEvent, type PdDatepickerCustomEvent, type PdDropdownCustomEvent, type PdInputCustomEvent, type PdSliderCustomEvent, type PdTextareaCustomEvent } from "@parlamentsdienste-components/core";
import { PdAlert as PdAlertElement, defineCustomElement as definePdAlert } from "@parlamentsdienste-components/core/components/pd-alert.js";
import { PdAnimation as PdAnimationElement, defineCustomElement as definePdAnimation } from "@parlamentsdienste-components/core/components/pd-animation.js";
import { PdBackdrop as PdBackdropElement, defineCustomElement as definePdBackdrop } from "@parlamentsdienste-components/core/components/pd-backdrop.js";
import { PdButtonGroup as PdButtonGroupElement, defineCustomElement as definePdButtonGroup } from "@parlamentsdienste-components/core/components/pd-button-group.js";
import { PdButton as PdButtonElement, defineCustomElement as definePdButton } from "@parlamentsdienste-components/core/components/pd-button.js";
import { PdCheckbox as PdCheckboxElement, defineCustomElement as definePdCheckbox } from "@parlamentsdienste-components/core/components/pd-checkbox.js";
import { PdChip as PdChipElement, defineCustomElement as definePdChip } from "@parlamentsdienste-components/core/components/pd-chip.js";
import { PdCombobox as PdComboboxElement, defineCustomElement as definePdCombobox } from "@parlamentsdienste-components/core/components/pd-combobox.js";
import { PdDatepicker as PdDatepickerElement, defineCustomElement as definePdDatepicker } from "@parlamentsdienste-components/core/components/pd-datepicker.js";
import { PdDropdownItem as PdDropdownItemElement, defineCustomElement as definePdDropdownItem } from "@parlamentsdienste-components/core/components/pd-dropdown-item.js";
import { PdDropdown as PdDropdownElement, defineCustomElement as definePdDropdown } from "@parlamentsdienste-components/core/components/pd-dropdown.js";
import { PdIcon as PdIconElement, defineCustomElement as definePdIcon } from "@parlamentsdienste-components/core/components/pd-icon.js";
import { PdInput as PdInputElement, defineCustomElement as definePdInput } from "@parlamentsdienste-components/core/components/pd-input.js";
import { PdLabel as PdLabelElement, defineCustomElement as definePdLabel } from "@parlamentsdienste-components/core/components/pd-label.js";
import { PdListItemExpandable as PdListItemExpandableElement, defineCustomElement as definePdListItemExpandable } from "@parlamentsdienste-components/core/components/pd-list-item-expandable.js";
import { PdListItem as PdListItemElement, defineCustomElement as definePdListItem } from "@parlamentsdienste-components/core/components/pd-list-item.js";
import { PdList as PdListElement, defineCustomElement as definePdList } from "@parlamentsdienste-components/core/components/pd-list.js";
import { PdMenuItem as PdMenuItemElement, defineCustomElement as definePdMenuItem } from "@parlamentsdienste-components/core/components/pd-menu-item.js";
import { PdMenu as PdMenuElement, defineCustomElement as definePdMenu } from "@parlamentsdienste-components/core/components/pd-menu.js";
import { PdModal as PdModalElement, defineCustomElement as definePdModal } from "@parlamentsdienste-components/core/components/pd-modal.js";
import { PdNavbarItem as PdNavbarItemElement, defineCustomElement as definePdNavbarItem } from "@parlamentsdienste-components/core/components/pd-navbar-item.js";
import { PdNavbar as PdNavbarElement, defineCustomElement as definePdNavbar } from "@parlamentsdienste-components/core/components/pd-navbar.js";
import { PdPanelContent as PdPanelContentElement, defineCustomElement as definePdPanelContent } from "@parlamentsdienste-components/core/components/pd-panel-content.js";
import { PdPanelFooter as PdPanelFooterElement, defineCustomElement as definePdPanelFooter } from "@parlamentsdienste-components/core/components/pd-panel-footer.js";
import { PdPanelHeader as PdPanelHeaderElement, defineCustomElement as definePdPanelHeader } from "@parlamentsdienste-components/core/components/pd-panel-header.js";
import { PdPanel as PdPanelElement, defineCustomElement as definePdPanel } from "@parlamentsdienste-components/core/components/pd-panel.js";
import { PdRadioGroup as PdRadioGroupElement, defineCustomElement as definePdRadioGroup } from "@parlamentsdienste-components/core/components/pd-radio-group.js";
import { PdRadio as PdRadioElement, defineCustomElement as definePdRadio } from "@parlamentsdienste-components/core/components/pd-radio.js";
import { PdSlider as PdSliderElement, defineCustomElement as definePdSlider } from "@parlamentsdienste-components/core/components/pd-slider.js";
import { PdTextarea as PdTextareaElement, defineCustomElement as definePdTextarea } from "@parlamentsdienste-components/core/components/pd-textarea.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

export type PdAlertEvents = {
    onPdClosed: EventName<PdAlertCustomEvent<MouseEvent>>,
    onPdAction: EventName<CustomEvent<void>>,
    onPdCollapsed: EventName<CustomEvent<boolean>>
};

export const PdAlert: StencilReactComponent<PdAlertElement, PdAlertEvents> = /*@__PURE__*/ createComponent<PdAlertElement, PdAlertEvents>({
    tagName: 'pd-alert',
    elementClass: PdAlertElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdClosed: 'pd-closed',
        onPdAction: 'pd-action',
        onPdCollapsed: 'pd-collapsed'
    } as PdAlertEvents,
    defineCustomElement: definePdAlert
});

export type PdAnimationEvents = NonNullable<unknown>;

export const PdAnimation: StencilReactComponent<PdAnimationElement, PdAnimationEvents> = /*@__PURE__*/ createComponent<PdAnimationElement, PdAnimationEvents>({
    tagName: 'pd-animation',
    elementClass: PdAnimationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdAnimationEvents,
    defineCustomElement: definePdAnimation
});

export type PdBackdropEvents = { onPdTap: EventName<CustomEvent<void>> };

export const PdBackdrop: StencilReactComponent<PdBackdropElement, PdBackdropEvents> = /*@__PURE__*/ createComponent<PdBackdropElement, PdBackdropEvents>({
    tagName: 'pd-backdrop',
    elementClass: PdBackdropElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPdTap: 'pd-tap' } as PdBackdropEvents,
    defineCustomElement: definePdBackdrop
});

export type PdButtonEvents = NonNullable<unknown>;

export const PdButton: StencilReactComponent<PdButtonElement, PdButtonEvents> = /*@__PURE__*/ createComponent<PdButtonElement, PdButtonEvents>({
    tagName: 'pd-button',
    elementClass: PdButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdButtonEvents,
    defineCustomElement: definePdButton
});

export type PdButtonGroupEvents = NonNullable<unknown>;

export const PdButtonGroup: StencilReactComponent<PdButtonGroupElement, PdButtonGroupEvents> = /*@__PURE__*/ createComponent<PdButtonGroupElement, PdButtonGroupEvents>({
    tagName: 'pd-button-group',
    elementClass: PdButtonGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdButtonGroupEvents,
    defineCustomElement: definePdButtonGroup
});

export type PdCheckboxEvents = { onPdChecked: EventName<CustomEvent<boolean>> };

export const PdCheckbox: StencilReactComponent<PdCheckboxElement, PdCheckboxEvents> = /*@__PURE__*/ createComponent<PdCheckboxElement, PdCheckboxEvents>({
    tagName: 'pd-checkbox',
    elementClass: PdCheckboxElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPdChecked: 'pd-checked' } as PdCheckboxEvents,
    defineCustomElement: definePdCheckbox
});

export type PdChipEvents = {
    onPdRemoveChip: EventName<CustomEvent<any>>,
    onPdCheckChip: EventName<CustomEvent<any>>
};

export const PdChip: StencilReactComponent<PdChipElement, PdChipEvents> = /*@__PURE__*/ createComponent<PdChipElement, PdChipEvents>({
    tagName: 'pd-chip',
    elementClass: PdChipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdRemoveChip: 'pd-remove-chip',
        onPdCheckChip: 'pd-check-chip'
    } as PdChipEvents,
    defineCustomElement: definePdChip
});

export type PdComboboxEvents = {
    onPdInput: EventName<PdComboboxCustomEvent<InputChangeEventDetail>>,
    onPdChange: EventName<PdComboboxCustomEvent<ComboboxItem | ComboboxItem[]>>,
    onPdCombobox: EventName<PdComboboxCustomEvent<ComboboxItem | ComboboxItem[]>>,
    onPdBlur: EventName<CustomEvent<void>>,
    onPdFocus: EventName<CustomEvent<void>>
};

export const PdCombobox: StencilReactComponent<PdComboboxElement, PdComboboxEvents> = /*@__PURE__*/ createComponent<PdComboboxElement, PdComboboxEvents>({
    tagName: 'pd-combobox',
    elementClass: PdComboboxElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdInput: 'pd-input',
        onPdChange: 'pd-change',
        onPdCombobox: 'pd-combobox',
        onPdBlur: 'pd-blur',
        onPdFocus: 'pd-focus'
    } as PdComboboxEvents,
    defineCustomElement: definePdCombobox
});

export type PdDatepickerEvents = {
    onPdChange: EventName<PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>>,
    onPdOpen: EventName<PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>>,
    onPdClose: EventName<PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>>,
    onPdMonthChange: EventName<PdDatepickerCustomEvent<{
        selectedDates: Date[];
        dateStr: string;
    }>>,
    onPdYearChange: EventName<PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>>,
    onPdReady: EventName<PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>>,
    onPdValueUpdate: EventName<PdDatepickerCustomEvent<{
        selectedDates: Date[];
        dateStr: string;
    }>>
};

export const PdDatepicker: StencilReactComponent<PdDatepickerElement, PdDatepickerEvents> = /*@__PURE__*/ createComponent<PdDatepickerElement, PdDatepickerEvents>({
    tagName: 'pd-datepicker',
    elementClass: PdDatepickerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdChange: 'pd-change',
        onPdOpen: 'pd-open',
        onPdClose: 'pd-close',
        onPdMonthChange: 'pd-month-change',
        onPdYearChange: 'pd-year-change',
        onPdReady: 'pd-ready',
        onPdValueUpdate: 'pd-value-update'
    } as PdDatepickerEvents,
    defineCustomElement: definePdDatepicker
});

export type PdDropdownEvents = { onPdChange: EventName<PdDropdownCustomEvent<DropdownItem>> };

export const PdDropdown: StencilReactComponent<PdDropdownElement, PdDropdownEvents> = /*@__PURE__*/ createComponent<PdDropdownElement, PdDropdownEvents>({
    tagName: 'pd-dropdown',
    elementClass: PdDropdownElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPdChange: 'pd-change' } as PdDropdownEvents,
    defineCustomElement: definePdDropdown
});

export type PdDropdownItemEvents = NonNullable<unknown>;

export const PdDropdownItem: StencilReactComponent<PdDropdownItemElement, PdDropdownItemEvents> = /*@__PURE__*/ createComponent<PdDropdownItemElement, PdDropdownItemEvents>({
    tagName: 'pd-dropdown-item',
    elementClass: PdDropdownItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdDropdownItemEvents,
    defineCustomElement: definePdDropdownItem
});

export type PdIconEvents = NonNullable<unknown>;

export const PdIcon: StencilReactComponent<PdIconElement, PdIconEvents> = /*@__PURE__*/ createComponent<PdIconElement, PdIconEvents>({
    tagName: 'pd-icon',
    elementClass: PdIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdIconEvents,
    defineCustomElement: definePdIcon
});

export type PdInputEvents = {
    onPdInput: EventName<PdInputCustomEvent<KeyboardEvent>>,
    onPdChange: EventName<PdInputCustomEvent<InputChangeEventDetail>>,
    onPdBlur: EventName<CustomEvent<void>>,
    onPdFocus: EventName<CustomEvent<void>>
};

export const PdInput: StencilReactComponent<PdInputElement, PdInputEvents> = /*@__PURE__*/ createComponent<PdInputElement, PdInputEvents>({
    tagName: 'pd-input',
    elementClass: PdInputElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdInput: 'pd-input',
        onPdChange: 'pd-change',
        onPdBlur: 'pd-blur',
        onPdFocus: 'pd-focus'
    } as PdInputEvents,
    defineCustomElement: definePdInput
});

export type PdLabelEvents = NonNullable<unknown>;

export const PdLabel: StencilReactComponent<PdLabelElement, PdLabelEvents> = /*@__PURE__*/ createComponent<PdLabelElement, PdLabelEvents>({
    tagName: 'pd-label',
    elementClass: PdLabelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdLabelEvents,
    defineCustomElement: definePdLabel
});

export type PdListEvents = NonNullable<unknown>;

export const PdList: StencilReactComponent<PdListElement, PdListEvents> = /*@__PURE__*/ createComponent<PdListElement, PdListEvents>({
    tagName: 'pd-list',
    elementClass: PdListElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdListEvents,
    defineCustomElement: definePdList
});

export type PdListItemEvents = NonNullable<unknown>;

export const PdListItem: StencilReactComponent<PdListItemElement, PdListItemEvents> = /*@__PURE__*/ createComponent<PdListItemElement, PdListItemEvents>({
    tagName: 'pd-list-item',
    elementClass: PdListItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdListItemEvents,
    defineCustomElement: definePdListItem
});

export type PdListItemExpandableEvents = {
    onPdEdit: EventName<CustomEvent<void>>,
    onPdExpand: EventName<CustomEvent<void>>,
    onPdSelected: EventName<CustomEvent<boolean>>,
    onPdCollapsed: EventName<CustomEvent<boolean>>,
    onPdContentClick: EventName<CustomEvent<void>>
};

export const PdListItemExpandable: StencilReactComponent<PdListItemExpandableElement, PdListItemExpandableEvents> = /*@__PURE__*/ createComponent<PdListItemExpandableElement, PdListItemExpandableEvents>({
    tagName: 'pd-list-item-expandable',
    elementClass: PdListItemExpandableElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdEdit: 'pd-edit',
        onPdExpand: 'pd-expand',
        onPdSelected: 'pd-selected',
        onPdCollapsed: 'pd-collapsed',
        onPdContentClick: 'pd-content-click'
    } as PdListItemExpandableEvents,
    defineCustomElement: definePdListItemExpandable
});

export type PdMenuEvents = NonNullable<unknown>;

export const PdMenu: StencilReactComponent<PdMenuElement, PdMenuEvents> = /*@__PURE__*/ createComponent<PdMenuElement, PdMenuEvents>({
    tagName: 'pd-menu',
    elementClass: PdMenuElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdMenuEvents,
    defineCustomElement: definePdMenu
});

export type PdMenuItemEvents = NonNullable<unknown>;

export const PdMenuItem: StencilReactComponent<PdMenuItemElement, PdMenuItemEvents> = /*@__PURE__*/ createComponent<PdMenuItemElement, PdMenuItemEvents>({
    tagName: 'pd-menu-item',
    elementClass: PdMenuItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdMenuItemEvents,
    defineCustomElement: definePdMenuItem
});

export type PdModalEvents = {
    onPdClosed: EventName<CustomEvent<void>>,
    onPdBackdrop: EventName<CustomEvent<void>>,
    onPdEscape: EventName<CustomEvent<void>>
};

export const PdModal: StencilReactComponent<PdModalElement, PdModalEvents> = /*@__PURE__*/ createComponent<PdModalElement, PdModalEvents>({
    tagName: 'pd-modal',
    elementClass: PdModalElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdClosed: 'pd-closed',
        onPdBackdrop: 'pd-backdrop',
        onPdEscape: 'pd-escape'
    } as PdModalEvents,
    defineCustomElement: definePdModal
});

export type PdNavbarEvents = { onPdMenu: EventName<CustomEvent<void>> };

export const PdNavbar: StencilReactComponent<PdNavbarElement, PdNavbarEvents> = /*@__PURE__*/ createComponent<PdNavbarElement, PdNavbarEvents>({
    tagName: 'pd-navbar',
    elementClass: PdNavbarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPdMenu: 'pd-menu' } as PdNavbarEvents,
    defineCustomElement: definePdNavbar
});

export type PdNavbarItemEvents = NonNullable<unknown>;

export const PdNavbarItem: StencilReactComponent<PdNavbarItemElement, PdNavbarItemEvents> = /*@__PURE__*/ createComponent<PdNavbarItemElement, PdNavbarItemEvents>({
    tagName: 'pd-navbar-item',
    elementClass: PdNavbarItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdNavbarItemEvents,
    defineCustomElement: definePdNavbarItem
});

export type PdPanelEvents = { onPdCollapsed: EventName<CustomEvent<any>> };

export const PdPanel: StencilReactComponent<PdPanelElement, PdPanelEvents> = /*@__PURE__*/ createComponent<PdPanelElement, PdPanelEvents>({
    tagName: 'pd-panel',
    elementClass: PdPanelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPdCollapsed: 'pd-collapsed' } as PdPanelEvents,
    defineCustomElement: definePdPanel
});

export type PdPanelContentEvents = NonNullable<unknown>;

export const PdPanelContent: StencilReactComponent<PdPanelContentElement, PdPanelContentEvents> = /*@__PURE__*/ createComponent<PdPanelContentElement, PdPanelContentEvents>({
    tagName: 'pd-panel-content',
    elementClass: PdPanelContentElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdPanelContentEvents,
    defineCustomElement: definePdPanelContent
});

export type PdPanelFooterEvents = NonNullable<unknown>;

export const PdPanelFooter: StencilReactComponent<PdPanelFooterElement, PdPanelFooterEvents> = /*@__PURE__*/ createComponent<PdPanelFooterElement, PdPanelFooterEvents>({
    tagName: 'pd-panel-footer',
    elementClass: PdPanelFooterElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdPanelFooterEvents,
    defineCustomElement: definePdPanelFooter
});

export type PdPanelHeaderEvents = { onPdHover: EventName<CustomEvent<boolean>> };

export const PdPanelHeader: StencilReactComponent<PdPanelHeaderElement, PdPanelHeaderEvents> = /*@__PURE__*/ createComponent<PdPanelHeaderElement, PdPanelHeaderEvents>({
    tagName: 'pd-panel-header',
    elementClass: PdPanelHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPdHover: 'pd-hover' } as PdPanelHeaderEvents,
    defineCustomElement: definePdPanelHeader
});

export type PdRadioEvents = NonNullable<unknown>;

export const PdRadio: StencilReactComponent<PdRadioElement, PdRadioEvents> = /*@__PURE__*/ createComponent<PdRadioElement, PdRadioEvents>({
    tagName: 'pd-radio',
    elementClass: PdRadioElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as PdRadioEvents,
    defineCustomElement: definePdRadio
});

export type PdRadioGroupEvents = { onPdChange: EventName<CustomEvent<string>> };

export const PdRadioGroup: StencilReactComponent<PdRadioGroupElement, PdRadioGroupEvents> = /*@__PURE__*/ createComponent<PdRadioGroupElement, PdRadioGroupEvents>({
    tagName: 'pd-radio-group',
    elementClass: PdRadioGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPdChange: 'pd-change' } as PdRadioGroupEvents,
    defineCustomElement: definePdRadioGroup
});

export type PdSliderEvents = {
    onPdInput: EventName<PdSliderCustomEvent<InputChangeEventDetail>>,
    onPdChange: EventName<PdSliderCustomEvent<InputChangeEventDetail>>
};

export const PdSlider: StencilReactComponent<PdSliderElement, PdSliderEvents> = /*@__PURE__*/ createComponent<PdSliderElement, PdSliderEvents>({
    tagName: 'pd-slider',
    elementClass: PdSliderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdInput: 'pd-input',
        onPdChange: 'pd-change'
    } as PdSliderEvents,
    defineCustomElement: definePdSlider
});

export type PdTextareaEvents = {
    onPdChange: EventName<CustomEvent<any>>,
    onPdInput: EventName<PdTextareaCustomEvent<KeyboardEvent>>,
    onPdBlur: EventName<PdTextareaCustomEvent<FocusEvent>>,
    onPdFocus: EventName<PdTextareaCustomEvent<FocusEvent>>
};

export const PdTextarea: StencilReactComponent<PdTextareaElement, PdTextareaEvents> = /*@__PURE__*/ createComponent<PdTextareaElement, PdTextareaEvents>({
    tagName: 'pd-textarea',
    elementClass: PdTextareaElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPdChange: 'pd-change',
        onPdInput: 'pd-input',
        onPdBlur: 'pd-blur',
        onPdFocus: 'pd-focus'
    } as PdTextareaEvents,
    defineCustomElement: definePdTextarea
});
