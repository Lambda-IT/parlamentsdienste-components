/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChipType, ComboboxItem, DropdownItem, DropdownItemSelect, InputChangeEventDetail, PdButtonColor, PdButtonSize, PdButtonType, PdIconLocation, TextFieldTypes, TextWrap } from "./types";
import { DateOption, Options } from "flatpickr/dist/types/options";
export { ChipType, ComboboxItem, DropdownItem, DropdownItemSelect, InputChangeEventDetail, PdButtonColor, PdButtonSize, PdButtonType, PdIconLocation, TextFieldTypes, TextWrap } from "./types";
export { DateOption, Options } from "flatpickr/dist/types/options";
export namespace Components {
    interface PdAlert {
        /**
          * A link displayed to the right side of the alert
         */
        "actionHref": string;
        /**
          * Target for action href (eg. _blank)
         */
        "actionTarget": string;
        /**
          * Text to show on action
         */
        "actionText": string;
        /**
          * Text to show on expanded action
         */
        "actionTextExpanded": string;
        /**
          * Display an option to close the alert
         */
        "closable": boolean;
        /**
          * Color schema used for the alert
         */
        "color": 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * Enable expandable content
         */
        "expandable": boolean;
        /**
          * Expands / collapses the panel content
         */
        "expanded": boolean;
        /**
          * Hide alert icon
         */
        "hideIcon": boolean;
    }
    interface PdButton {
        /**
          * Color schema used for the button
         */
        "color": PdButtonColor;
        /**
          * Sets button to disbaled state
         */
        "disabled": boolean;
        /**
          * Sets button to 100% width
         */
        "fullWidth": boolean;
        /**
          * Set href to create a link button
         */
        "href": string;
        /**
          * Sets the position of the icon
         */
        "iconLocation": PdIconLocation;
        /**
          * Use outline schema
         */
        "outline": boolean;
        /**
          * Set href to create a link button
         */
        "showAsLink": boolean;
        /**
          * Button size
         */
        "size": PdButtonSize;
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target": string;
        /**
          * Sets button type |button|submit|reset|
         */
        "type": PdButtonType;
    }
    interface PdCheckbox {
        /**
          * Sets check state of the checkbox true/false
         */
        "checked": boolean;
        /**
          * Sets checkbox to disabled state
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * indeterminate state
         */
        "isIndeterminate": boolean;
        /**
          * checkbox name
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Checkbox description text
         */
        "text": string;
        /**
          * value of checkbox
         */
        "value": boolean;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust": boolean;
    }
    interface PdChip {
        /**
          * Sets chip to checked state
         */
        "checked": boolean;
        /**
          * Sets chip to disabled state
         */
        "disabled": boolean;
        /**
          * Sets chip to readonly state
         */
        "readonly": boolean;
        /**
          * Sets chip type |text|toggle|filter|
         */
        "type": ChipType;
    }
    interface PdCombobox {
        /**
          * If true, the combobox will not search/filter in the items (for example when the combobox is used to make backend searches)
         */
        "disableFilter": boolean;
        /**
          * If `true`, the button to deselect all selected items will not be shown.
         */
        "disableMultiselectCounter": boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Enable selection of an empty item
         */
        "emptyItem": boolean;
        /**
          * Data used for the empty item
         */
        "emptyItemData": ComboboxItem;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * Show matching parts in results as highlighted
         */
        "highlight"?: boolean;
        /**
          * Items visible in dropdown
         */
        "itemCount": number;
        /**
          * Values shown as combobox items
         */
        "items": ComboboxItem[];
        /**
          * combobox box label
         */
        "label"?: string;
        /**
          * If `true`, the combobox can select multiple items.
         */
        "multiselect": boolean;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Reset the selection of the dropdown
         */
        "reset": () => Promise<void>;
        /**
          * If `true`, the combobox get a selected state like a dropdown.
         */
        "selectable": boolean;
        /**
          * Sets focus on the specified `pd-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Set the open-close state of the dropdown
         */
        "setOpen": (open?: boolean) => Promise<void>;
        /**
          * Set a preselected entry by index
         */
        "setSelectedIndex": (index: number) => Promise<void>;
        /**
          * Input tag size (check pd-input 'size' for more info)
         */
        "size"?: number;
        /**
          * The value of the input.
         */
        "value"?: string;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust": boolean;
        /**
          * If `true`, the combobox is replaced with a simple text
         */
        "viewOnly": boolean;
    }
    interface PdDatepicker {
        /**
          * Initializes the datepicker again without setting a date. Needed for example in Vue's KeepAlive, when the Instance was destroyed and needs to be re-initialized.
         */
        "activate": () => Promise<void>;
        /**
          * Allow manual input
         */
        "allowInput": boolean;
        /**
          * Resets the selected dates (if any) and clears the input.
         */
        "clear": () => Promise<void>;
        /**
          * Closes the calendar.
         */
        "close": () => Promise<void>;
        /**
          * Set the configuration for the datepicker (only applied at instantiation) Check out https://flatpickr.js.org/options for further documentation about this config
         */
        "config": Partial<Options>;
        /**
          * Sets the current selected date(s), which can be a date string (using current dateFormat), a Date, or anArray of the Dates.
         */
        "date": DateOption | DateOption[];
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * Hides the clear icon
         */
        "hideClearIcon"?: boolean;
        /**
          * If `true`, a calendar icon is shown at the end of the input.
         */
        "icon": boolean;
        /**
          * datepicker box label
         */
        "label"?: string;
        /**
          * Shows/opens the calendar.
         */
        "open": () => Promise<void>;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets a config option to value, redrawing the calendar and updating the current view, if necessary. Check out https://flatpickr.js.org/options or https://flatpickr.js.org/instance-methods-properties-elements/#setoption-value for further documentation about this config
         */
        "set": (option: any, value?: any) => Promise<void>;
        /**
          * Sets the current selected date(s) to date, which can be a date string, a Date, or anArray of the Dates. Optionally, pass true as the second argument to force any onChange events to fire. And if youâ€™re passing a date string with a format other than your dateFormat, provide a dateStrFormat e.g. "m/d/Y"
         */
        "setDate": (date: DateOption | DateOption[], triggerChange?: boolean, format?: string) => Promise<void>;
        /**
          * Input tag size (check pd-input 'size' for more info)
         */
        "size"?: number;
        /**
          * Shows/opens the calendar if its closed, hides/closes it otherwise.
         */
        "toggle": () => Promise<void>;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust": boolean;
    }
    interface PdDropdown {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Enable selection of an empty item
         */
        "emptyItem": boolean;
        /**
          * Data used for the empty item
         */
        "emptyItemData": DropdownItem;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * Items visible in dropdown
         */
        "itemCount": number;
        /**
          * Items to display and select in dropdown
         */
        "items": DropdownItem[];
        /**
          * Dropdown box label
         */
        "label"?: string;
        /**
          * Placeholder when no item is selected
         */
        "placeholder": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Reset the selection of the dropdown
         */
        "reset": () => Promise<void>;
        /**
          * To select an item by prop. Needs to be an object with an id property, a string or a number.
         */
        "selected": DropdownItemSelect;
        /**
          * Set a preselected entry by index
         */
        "setSelectedIndex": (index: number) => Promise<void>;
        /**
          * Selected item text wrap on words
         */
        "textWrap": TextWrap;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust": boolean;
        /**
          * If `true`, the dropdown is replaced with a simple text
         */
        "viewOnly": boolean;
    }
    interface PdDropdownItem {
        /**
          * Find an highlight this text in value
         */
        "highlight"?: string | number;
        /**
          * Displays an item from the provided gallery
         */
        "iconName"?: string;
        /**
          * Specifies the `src` url of an SVG file to use as icon.
         */
        "iconSrc"?: string;
        /**
          * If `true`, the item displays a checkbox (for multiselect comboboxes).
         */
        "multiselect": boolean;
        /**
          * Sets this item to selected
         */
        "selected": boolean;
        /**
          * Value for this item
         */
        "value": string;
    }
    interface PdIcon {
        /**
          * Flip in X/Y direction
         */
        "flip": 'x' | 'y' | 'xy';
        /**
          * description tag in svg for accessability
         */
        "iconDescription": string;
        /**
          * title tag in svg for accessability
         */
        "iconTitle": string;
        /**
          * Icon will be loaded lazily when it is visible
         */
        "lazy": boolean;
        /**
          * Name of an icon from the provided gallery
         */
        "name"?: string;
        /**
          * Rotation in 'deg'
         */
        "rotate": number;
        /**
          * Size of the icon in 'rem'
         */
        "size"?: number;
        /**
          * Spin animation in ms per rotation
         */
        "spin": number;
        /**
          * change animation direction
         */
        "spinReverse": boolean;
        /**
          * Specifies the `src` url of an SVG file to use.
         */
        "src"?: string;
    }
    interface PdInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": 'on' | 'off';
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Label text
         */
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `pd-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust": boolean;
        /**
          * If `true`, the input is replaced with a simple text
         */
        "viewOnly": boolean;
    }
    interface PdRadio {
        /**
          * Checks radio
         */
        "checked": boolean;
        /**
          * Sets radio to disabled state
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * Label used by radio
         */
        "label"?: string;
        /**
          * Name of radio. Used to group radios together
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * Value of radio
         */
        "value"?: any;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust": boolean;
    }
    interface PdRadioGroup {
        /**
          * If `true`, the user cannot interact with the radio buttons.
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * Name of the radio-group. Used to group radios together
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * Value of the radio-group. Used to set the value of the selected radio
         */
        "value": string;
    }
}
export interface PdAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdAlertElement;
}
export interface PdCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdCheckboxElement;
}
export interface PdChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdChipElement;
}
export interface PdComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdComboboxElement;
}
export interface PdDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdDatepickerElement;
}
export interface PdDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdDropdownElement;
}
export interface PdInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdInputElement;
}
export interface PdRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdRadioGroupElement;
}
declare global {
    interface HTMLPdAlertElementEventMap {
        "pd-closed": MouseEvent;
        "pd-action": void;
        "pd-collapsed": boolean;
    }
    interface HTMLPdAlertElement extends Components.PdAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdAlertElementEventMap>(type: K, listener: (this: HTMLPdAlertElement, ev: PdAlertCustomEvent<HTMLPdAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdAlertElementEventMap>(type: K, listener: (this: HTMLPdAlertElement, ev: PdAlertCustomEvent<HTMLPdAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdAlertElement: {
        prototype: HTMLPdAlertElement;
        new (): HTMLPdAlertElement;
    };
    interface HTMLPdButtonElement extends Components.PdButton, HTMLStencilElement {
    }
    var HTMLPdButtonElement: {
        prototype: HTMLPdButtonElement;
        new (): HTMLPdButtonElement;
    };
    interface HTMLPdCheckboxElementEventMap {
        "pd-checked": boolean;
    }
    interface HTMLPdCheckboxElement extends Components.PdCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdCheckboxElementEventMap>(type: K, listener: (this: HTMLPdCheckboxElement, ev: PdCheckboxCustomEvent<HTMLPdCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdCheckboxElementEventMap>(type: K, listener: (this: HTMLPdCheckboxElement, ev: PdCheckboxCustomEvent<HTMLPdCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdCheckboxElement: {
        prototype: HTMLPdCheckboxElement;
        new (): HTMLPdCheckboxElement;
    };
    interface HTMLPdChipElementEventMap {
        "pd-remove-chip": any;
        "pd-check-chip": any;
    }
    interface HTMLPdChipElement extends Components.PdChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdChipElementEventMap>(type: K, listener: (this: HTMLPdChipElement, ev: PdChipCustomEvent<HTMLPdChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdChipElementEventMap>(type: K, listener: (this: HTMLPdChipElement, ev: PdChipCustomEvent<HTMLPdChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdChipElement: {
        prototype: HTMLPdChipElement;
        new (): HTMLPdChipElement;
    };
    interface HTMLPdComboboxElementEventMap {
        "pd-input": InputChangeEventDetail;
        "pd-change": ComboboxItem | ComboboxItem[];
        "pd-combobox": ComboboxItem | ComboboxItem[];
        "pd-blur": void;
        "pd-focus": void;
    }
    interface HTMLPdComboboxElement extends Components.PdCombobox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdComboboxElementEventMap>(type: K, listener: (this: HTMLPdComboboxElement, ev: PdComboboxCustomEvent<HTMLPdComboboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdComboboxElementEventMap>(type: K, listener: (this: HTMLPdComboboxElement, ev: PdComboboxCustomEvent<HTMLPdComboboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdComboboxElement: {
        prototype: HTMLPdComboboxElement;
        new (): HTMLPdComboboxElement;
    };
    interface HTMLPdDatepickerElementEventMap {
        "pd-change": { selectedDates: Date[]; dateStr: string };
        "pd-open": { selectedDates: Date[]; dateStr: string };
        "pd-close": { selectedDates: Date[]; dateStr: string };
        "pd-month-change": {
        selectedDates: Date[];
        dateStr: string;
    };
        "pd-year-change": { selectedDates: Date[]; dateStr: string };
        "pd-ready": { selectedDates: Date[]; dateStr: string };
        "pd-value-update": {
        selectedDates: Date[];
        dateStr: string;
    };
    }
    interface HTMLPdDatepickerElement extends Components.PdDatepicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdDatepickerElementEventMap>(type: K, listener: (this: HTMLPdDatepickerElement, ev: PdDatepickerCustomEvent<HTMLPdDatepickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdDatepickerElementEventMap>(type: K, listener: (this: HTMLPdDatepickerElement, ev: PdDatepickerCustomEvent<HTMLPdDatepickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdDatepickerElement: {
        prototype: HTMLPdDatepickerElement;
        new (): HTMLPdDatepickerElement;
    };
    interface HTMLPdDropdownElementEventMap {
        "pd-change": DropdownItem;
    }
    interface HTMLPdDropdownElement extends Components.PdDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdDropdownElementEventMap>(type: K, listener: (this: HTMLPdDropdownElement, ev: PdDropdownCustomEvent<HTMLPdDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdDropdownElementEventMap>(type: K, listener: (this: HTMLPdDropdownElement, ev: PdDropdownCustomEvent<HTMLPdDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdDropdownElement: {
        prototype: HTMLPdDropdownElement;
        new (): HTMLPdDropdownElement;
    };
    interface HTMLPdDropdownItemElement extends Components.PdDropdownItem, HTMLStencilElement {
    }
    var HTMLPdDropdownItemElement: {
        prototype: HTMLPdDropdownItemElement;
        new (): HTMLPdDropdownItemElement;
    };
    interface HTMLPdIconElement extends Components.PdIcon, HTMLStencilElement {
    }
    var HTMLPdIconElement: {
        prototype: HTMLPdIconElement;
        new (): HTMLPdIconElement;
    };
    interface HTMLPdInputElementEventMap {
        "pd-input": KeyboardEvent;
        "pd-change": InputChangeEventDetail;
        "pd-blur": void;
        "pd-focus": void;
    }
    interface HTMLPdInputElement extends Components.PdInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdInputElementEventMap>(type: K, listener: (this: HTMLPdInputElement, ev: PdInputCustomEvent<HTMLPdInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdInputElementEventMap>(type: K, listener: (this: HTMLPdInputElement, ev: PdInputCustomEvent<HTMLPdInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdInputElement: {
        prototype: HTMLPdInputElement;
        new (): HTMLPdInputElement;
    };
    interface HTMLPdRadioElement extends Components.PdRadio, HTMLStencilElement {
    }
    var HTMLPdRadioElement: {
        prototype: HTMLPdRadioElement;
        new (): HTMLPdRadioElement;
    };
    interface HTMLPdRadioGroupElementEventMap {
        "pd-change": string;
    }
    interface HTMLPdRadioGroupElement extends Components.PdRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdRadioGroupElementEventMap>(type: K, listener: (this: HTMLPdRadioGroupElement, ev: PdRadioGroupCustomEvent<HTMLPdRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdRadioGroupElementEventMap>(type: K, listener: (this: HTMLPdRadioGroupElement, ev: PdRadioGroupCustomEvent<HTMLPdRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdRadioGroupElement: {
        prototype: HTMLPdRadioGroupElement;
        new (): HTMLPdRadioGroupElement;
    };
    interface HTMLElementTagNameMap {
        "pd-alert": HTMLPdAlertElement;
        "pd-button": HTMLPdButtonElement;
        "pd-checkbox": HTMLPdCheckboxElement;
        "pd-chip": HTMLPdChipElement;
        "pd-combobox": HTMLPdComboboxElement;
        "pd-datepicker": HTMLPdDatepickerElement;
        "pd-dropdown": HTMLPdDropdownElement;
        "pd-dropdown-item": HTMLPdDropdownItemElement;
        "pd-icon": HTMLPdIconElement;
        "pd-input": HTMLPdInputElement;
        "pd-radio": HTMLPdRadioElement;
        "pd-radio-group": HTMLPdRadioGroupElement;
    }
}
declare namespace LocalJSX {
    interface PdAlert {
        /**
          * A link displayed to the right side of the alert
         */
        "actionHref"?: string;
        /**
          * Target for action href (eg. _blank)
         */
        "actionTarget"?: string;
        /**
          * Text to show on action
         */
        "actionText"?: string;
        /**
          * Text to show on expanded action
         */
        "actionTextExpanded"?: string;
        /**
          * Display an option to close the alert
         */
        "closable"?: boolean;
        /**
          * Color schema used for the alert
         */
        "color"?: 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * Enable expandable content
         */
        "expandable"?: boolean;
        /**
          * Expands / collapses the panel content
         */
        "expanded"?: boolean;
        /**
          * Hide alert icon
         */
        "hideIcon"?: boolean;
        /**
          * Emitted when action button was pressed.
         */
        "onPd-action"?: (event: PdAlertCustomEvent<void>) => void;
        /**
          * Emitted when close button was pressed.
         */
        "onPd-closed"?: (event: PdAlertCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when inner content is expanded/collapsed.
         */
        "onPd-collapsed"?: (event: PdAlertCustomEvent<boolean>) => void;
    }
    interface PdButton {
        /**
          * Color schema used for the button
         */
        "color"?: PdButtonColor;
        /**
          * Sets button to disbaled state
         */
        "disabled"?: boolean;
        /**
          * Sets button to 100% width
         */
        "fullWidth"?: boolean;
        /**
          * Set href to create a link button
         */
        "href"?: string;
        /**
          * Sets the position of the icon
         */
        "iconLocation"?: PdIconLocation;
        /**
          * Use outline schema
         */
        "outline"?: boolean;
        /**
          * Set href to create a link button
         */
        "showAsLink"?: boolean;
        /**
          * Button size
         */
        "size"?: PdButtonSize;
        /**
          * Sets target for link button e.g. '_blank'
         */
        "target"?: string;
        /**
          * Sets button type |button|submit|reset|
         */
        "type"?: PdButtonType;
    }
    interface PdCheckbox {
        /**
          * Sets check state of the checkbox true/false
         */
        "checked"?: boolean;
        /**
          * Sets checkbox to disabled state
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * indeterminate state
         */
        "isIndeterminate"?: boolean;
        /**
          * checkbox name
         */
        "name"?: string;
        "onPd-checked"?: (event: PdCheckboxCustomEvent<boolean>) => void;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * Checkbox description text
         */
        "text"?: string;
        /**
          * value of checkbox
         */
        "value"?: boolean;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust"?: boolean;
    }
    interface PdChip {
        /**
          * Sets chip to checked state
         */
        "checked"?: boolean;
        /**
          * Sets chip to disabled state
         */
        "disabled"?: boolean;
        /**
          * Event for check chip
         */
        "onPd-check-chip"?: (event: PdChipCustomEvent<any>) => void;
        /**
          * Event for clicking the cross to remove a chip
         */
        "onPd-remove-chip"?: (event: PdChipCustomEvent<any>) => void;
        /**
          * Sets chip to readonly state
         */
        "readonly"?: boolean;
        /**
          * Sets chip type |text|toggle|filter|
         */
        "type"?: ChipType;
    }
    interface PdCombobox {
        /**
          * If true, the combobox will not search/filter in the items (for example when the combobox is used to make backend searches)
         */
        "disableFilter"?: boolean;
        /**
          * If `true`, the button to deselect all selected items will not be shown.
         */
        "disableMultiselectCounter"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Enable selection of an empty item
         */
        "emptyItem"?: boolean;
        /**
          * Data used for the empty item
         */
        "emptyItemData"?: ComboboxItem;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * Show matching parts in results as highlighted
         */
        "highlight"?: boolean;
        /**
          * Items visible in dropdown
         */
        "itemCount"?: number;
        /**
          * Values shown as combobox items
         */
        "items"?: ComboboxItem[];
        /**
          * combobox box label
         */
        "label"?: string;
        /**
          * If `true`, the combobox can select multiple items.
         */
        "multiselect"?: boolean;
        /**
          * Emitted when the input loses focus.
         */
        "onPd-blur"?: (event: PdComboboxCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onPd-change"?: (event: PdComboboxCustomEvent<ComboboxItem | ComboboxItem[]>) => void;
        /**
          * Emitted when a combobox request occurred.
         */
        "onPd-combobox"?: (event: PdComboboxCustomEvent<ComboboxItem | ComboboxItem[]>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPd-focus"?: (event: PdComboboxCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onPd-input"?: (event: PdComboboxCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * If `true`, the combobox get a selected state like a dropdown.
         */
        "selectable"?: boolean;
        /**
          * Input tag size (check pd-input 'size' for more info)
         */
        "size"?: number;
        /**
          * The value of the input.
         */
        "value"?: string;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust"?: boolean;
        /**
          * If `true`, the combobox is replaced with a simple text
         */
        "viewOnly"?: boolean;
    }
    interface PdDatepicker {
        /**
          * Allow manual input
         */
        "allowInput"?: boolean;
        /**
          * Set the configuration for the datepicker (only applied at instantiation) Check out https://flatpickr.js.org/options for further documentation about this config
         */
        "config"?: Partial<Options>;
        /**
          * Sets the current selected date(s), which can be a date string (using current dateFormat), a Date, or anArray of the Dates.
         */
        "date"?: DateOption | DateOption[];
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * Hides the clear icon
         */
        "hideClearIcon"?: boolean;
        /**
          * If `true`, a calendar icon is shown at the end of the input.
         */
        "icon"?: boolean;
        /**
          * datepicker box label
         */
        "label"?: string;
        "onPd-change"?: (event: PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-close"?: (event: PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-month-change"?: (event: PdDatepickerCustomEvent<{
        selectedDates: Date[];
        dateStr: string;
    }>) => void;
        "onPd-open"?: (event: PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-ready"?: (event: PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        "onPd-value-update"?: (event: PdDatepickerCustomEvent<{
        selectedDates: Date[];
        dateStr: string;
    }>) => void;
        "onPd-year-change"?: (event: PdDatepickerCustomEvent<{ selectedDates: Date[]; dateStr: string }>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * Input tag size (check pd-input 'size' for more info)
         */
        "size"?: number;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust"?: boolean;
    }
    interface PdDropdown {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Enable selection of an empty item
         */
        "emptyItem"?: boolean;
        /**
          * Data used for the empty item
         */
        "emptyItemData"?: DropdownItem;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * Items visible in dropdown
         */
        "itemCount"?: number;
        /**
          * Items to display and select in dropdown
         */
        "items"?: DropdownItem[];
        /**
          * Dropdown box label
         */
        "label"?: string;
        "onPd-change"?: (event: PdDropdownCustomEvent<DropdownItem>) => void;
        /**
          * Placeholder when no item is selected
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * To select an item by prop. Needs to be an object with an id property, a string or a number.
         */
        "selected"?: DropdownItemSelect;
        /**
          * Selected item text wrap on words
         */
        "textWrap"?: TextWrap;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust"?: boolean;
        /**
          * If `true`, the dropdown is replaced with a simple text
         */
        "viewOnly"?: boolean;
    }
    interface PdDropdownItem {
        /**
          * Find an highlight this text in value
         */
        "highlight"?: string | number;
        /**
          * Displays an item from the provided gallery
         */
        "iconName"?: string;
        /**
          * Specifies the `src` url of an SVG file to use as icon.
         */
        "iconSrc"?: string;
        /**
          * If `true`, the item displays a checkbox (for multiselect comboboxes).
         */
        "multiselect"?: boolean;
        /**
          * Sets this item to selected
         */
        "selected"?: boolean;
        /**
          * Value for this item
         */
        "value"?: string;
    }
    interface PdIcon {
        /**
          * Flip in X/Y direction
         */
        "flip"?: 'x' | 'y' | 'xy';
        /**
          * description tag in svg for accessability
         */
        "iconDescription"?: string;
        /**
          * title tag in svg for accessability
         */
        "iconTitle"?: string;
        /**
          * Icon will be loaded lazily when it is visible
         */
        "lazy"?: boolean;
        /**
          * Name of an icon from the provided gallery
         */
        "name"?: string;
        /**
          * Rotation in 'deg'
         */
        "rotate"?: number;
        /**
          * Size of the icon in 'rem'
         */
        "size"?: number;
        /**
          * Spin animation in ms per rotation
         */
        "spin"?: number;
        /**
          * change animation direction
         */
        "spinReverse"?: boolean;
        /**
          * Specifies the `src` url of an SVG file to use.
         */
        "src"?: string;
    }
    interface PdInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Label text
         */
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPd-blur"?: (event: PdInputCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onPd-change"?: (event: PdInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPd-focus"?: (event: PdInputCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onPd-input"?: (event: PdInputCustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust"?: boolean;
        /**
          * If `true`, the input is replaced with a simple text
         */
        "viewOnly"?: boolean;
    }
    interface PdRadio {
        /**
          * Checks radio
         */
        "checked"?: boolean;
        /**
          * Sets radio to disabled state
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * Label used by radio
         */
        "label"?: string;
        /**
          * Name of radio. Used to group radios together
         */
        "name"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * Value of radio
         */
        "value"?: any;
        /**
          * Default vertical adjustment for inline forms
         */
        "verticalAdjust"?: boolean;
    }
    interface PdRadioGroup {
        /**
          * If `true`, the user cannot interact with the radio buttons.
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * Name of the radio-group. Used to group radios together
         */
        "name"?: string;
        "onPd-change"?: (event: PdRadioGroupCustomEvent<string>) => void;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * Value of the radio-group. Used to set the value of the selected radio
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "pd-alert": PdAlert;
        "pd-button": PdButton;
        "pd-checkbox": PdCheckbox;
        "pd-chip": PdChip;
        "pd-combobox": PdCombobox;
        "pd-datepicker": PdDatepicker;
        "pd-dropdown": PdDropdown;
        "pd-dropdown-item": PdDropdownItem;
        "pd-icon": PdIcon;
        "pd-input": PdInput;
        "pd-radio": PdRadio;
        "pd-radio-group": PdRadioGroup;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pd-alert": LocalJSX.PdAlert & JSXBase.HTMLAttributes<HTMLPdAlertElement>;
            "pd-button": LocalJSX.PdButton & JSXBase.HTMLAttributes<HTMLPdButtonElement>;
            "pd-checkbox": LocalJSX.PdCheckbox & JSXBase.HTMLAttributes<HTMLPdCheckboxElement>;
            "pd-chip": LocalJSX.PdChip & JSXBase.HTMLAttributes<HTMLPdChipElement>;
            "pd-combobox": LocalJSX.PdCombobox & JSXBase.HTMLAttributes<HTMLPdComboboxElement>;
            "pd-datepicker": LocalJSX.PdDatepicker & JSXBase.HTMLAttributes<HTMLPdDatepickerElement>;
            "pd-dropdown": LocalJSX.PdDropdown & JSXBase.HTMLAttributes<HTMLPdDropdownElement>;
            "pd-dropdown-item": LocalJSX.PdDropdownItem & JSXBase.HTMLAttributes<HTMLPdDropdownItemElement>;
            "pd-icon": LocalJSX.PdIcon & JSXBase.HTMLAttributes<HTMLPdIconElement>;
            "pd-input": LocalJSX.PdInput & JSXBase.HTMLAttributes<HTMLPdInputElement>;
            "pd-radio": LocalJSX.PdRadio & JSXBase.HTMLAttributes<HTMLPdRadioElement>;
            "pd-radio-group": LocalJSX.PdRadioGroup & JSXBase.HTMLAttributes<HTMLPdRadioGroupElement>;
        }
    }
}
