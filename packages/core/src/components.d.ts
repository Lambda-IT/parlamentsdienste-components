/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface PdAlert {
        /**
          * A link displayed to the right side of the alert
         */
        "actionHref": string;
        /**
          * Target for action href (eg. _blank)
         */
        "actionTarget": string;
        /**
          * Text to show on action
         */
        "actionText": string;
        /**
          * Text to show on expanded action
         */
        "actionTextExpanded": string;
        /**
          * Display an option to close the alert
         */
        "closable": boolean;
        /**
          * Color schema used for the alert
         */
        "color": 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * Enable expandable content
         */
        "expandable": boolean;
        /**
          * Expands / collapses the panel content
         */
        "expanded": boolean;
        /**
          * Hide alert icon
         */
        "hideIcon": boolean;
    }
}
export interface PdAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPdAlertElement;
}
declare global {
    interface HTMLPdAlertElementEventMap {
        "pd-closed": MouseEvent;
        "pd-action": void;
        "pd-collapsed": boolean;
    }
    interface HTMLPdAlertElement extends Components.PdAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPdAlertElementEventMap>(type: K, listener: (this: HTMLPdAlertElement, ev: PdAlertCustomEvent<HTMLPdAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPdAlertElementEventMap>(type: K, listener: (this: HTMLPdAlertElement, ev: PdAlertCustomEvent<HTMLPdAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPdAlertElement: {
        prototype: HTMLPdAlertElement;
        new (): HTMLPdAlertElement;
    };
    interface HTMLElementTagNameMap {
        "pd-alert": HTMLPdAlertElement;
    }
}
declare namespace LocalJSX {
    interface PdAlert {
        /**
          * A link displayed to the right side of the alert
         */
        "actionHref"?: string;
        /**
          * Target for action href (eg. _blank)
         */
        "actionTarget"?: string;
        /**
          * Text to show on action
         */
        "actionText"?: string;
        /**
          * Text to show on expanded action
         */
        "actionTextExpanded"?: string;
        /**
          * Display an option to close the alert
         */
        "closable"?: boolean;
        /**
          * Color schema used for the alert
         */
        "color"?: 'primary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        /**
          * Enable expandable content
         */
        "expandable"?: boolean;
        /**
          * Expands / collapses the panel content
         */
        "expanded"?: boolean;
        /**
          * Hide alert icon
         */
        "hideIcon"?: boolean;
        /**
          * Emitted when action button was pressed.
         */
        "onPd-action"?: (event: PdAlertCustomEvent<void>) => void;
        /**
          * Emitted when close button was pressed.
         */
        "onPd-closed"?: (event: PdAlertCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when inner content is expanded/collapsed.
         */
        "onPd-collapsed"?: (event: PdAlertCustomEvent<boolean>) => void;
    }
    interface IntrinsicElements {
        "pd-alert": PdAlert;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pd-alert": LocalJSX.PdAlert & JSXBase.HTMLAttributes<HTMLPdAlertElement>;
        }
    }
}
