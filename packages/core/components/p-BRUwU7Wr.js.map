{"file":"p-BRUwU7Wr.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/utils/svg.ts","src/components/pd-icon/pd-icon.scss?tag=pd-icon&encapsulation=shadow","src/components/pd-icon/pd-icon.tsx"],"sourcesContent":["export const iconContent = new Map<string, string>();\nconst requests = new Map<string, Promise<any>>();\n\nexport const getSvgContent = (url: string) => {\n    // see if we already have a request for this url\n    let req = requests.get(url);\n\n    if (!req) {\n        if (typeof fetch !== 'undefined') {\n            // we don't already have a request\n            req = fetch(url).then((rsp) => {\n                if (rsp.ok) {\n                    return rsp.text().then((svgContent) => {\n                        iconContent.set(url, svgContent);\n                    });\n                }\n                iconContent.set(url, '');\n            });\n\n            // cache for the same requests\n            requests.set(url, req);\n        } else {\n            // set to empty for ssr scenarios and resolve promise\n            iconContent.set(url, '');\n            return Promise.resolve();\n        }\n    }\n\n    return req;\n};\n",":host {\n    display: inline-block;\n    width: 1em; // 1em\n    height: 1em; // 1em\n    vertical-align: bottom;\n}\n\n*,\n::before,\n::after {\n    box-sizing: border-box;\n    outline: none;\n}\n\n.pd-icon-inner,\n.pd-icon-inner svg {\n    display: block;\n    height: 100%;\n    width: 100%;\n}\n\n:host(.spin) {\n    -webkit-animation: spin 1s linear infinite;\n    -moz-animation: spin 1s linear infinite;\n    animation: spin 1s linear infinite;\n}\n@keyframes spin {\n    100% {\n        -webkit-transform: rotate(360deg);\n    }\n}\n\n@keyframes spin-reverse {\n    100% {\n        -webkit-transform: rotate(-360deg);\n    }\n}\n","import { Component, ComponentInterface, Element, h, Host, Prop, Watch } from '@stencil/core';\nimport { getSvgContent, getURL, iconContent } from '../../utils';\n\n@Component({\n    tag: 'pd-icon',\n    styleUrl: 'pd-icon.scss',\n    shadow: true,\n    assetsDirs: ['assets/icons'],\n})\nexport class Icon implements ComponentInterface {\n    private io?: IntersectionObserver;\n    private wrapperElement?: HTMLDivElement;\n\n    @Element() element!: HTMLElement;\n\n    private svgContent?: string;\n    private isVisible = false;\n\n    /**\n     * Specifies the `src` url of an SVG file to use.\n     */\n    @Prop() src?: string;\n\n    /**\n     * Name of an icon from the provided gallery\n     */\n    @Prop() name?: string;\n\n    /**\n     * Size of the icon in 'rem'\n     */\n    @Prop() size?: number;\n\n    /**\n     * Icon will be loaded lazily when it is visible\n     */\n    @Prop() lazy = true;\n\n    /**\n     * Rotation in 'deg'\n     */\n    @Prop() rotate: number = 0;\n\n    /**\n     * Flip in X/Y direction\n     */\n    @Prop() flip: 'x' | 'y' | 'xy';\n\n    /**\n     * Spin animation in ms per rotation\n     */\n    @Prop() spin: number;\n\n    /** change animation direction */\n    @Prop() spinReverse: boolean = false;\n\n    /** title tag in svg for accessability */\n    @Prop() iconTitle: string;\n\n    /** description tag in svg for accessability*/\n    @Prop() iconDescription: string;\n\n    // public componentDidLoad() {\n    public componentDidRender() {\n        // purposely do not return the promise here because loading\n        // the svg file should not hold up loading the app\n        // only load the svg if it's visible\n        this.waitUntilVisible(this.element, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n\n    public disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n\n    private waitUntilVisible(el: HTMLElement, rootMargin: string, cb: () => void) {\n        if (this.lazy && typeof window !== 'undefined' && (window as any).IntersectionObserver) {\n            const io = (this.io = new (window as any).IntersectionObserver(\n                (entries: IntersectionObserverEntry[]) => {\n                    entries.forEach(entry => {\n                        if (entry.isIntersecting) {\n                            io.disconnect();\n                            this.io = undefined;\n                            cb();\n                        }\n                    });\n                },\n                { rootMargin },\n            ));\n\n            io.observe(el);\n        } else {\n            // browser doesn't support IntersectionObserver\n            // so just fallback to always show it\n            cb();\n        }\n    }\n\n    @Watch('src')\n    @Watch('name')\n    loadIcon() {\n        if (this.isVisible) {\n            const url = this.src || (this.name ? getURL(`./assets/icons/icon_${this.name}.svg`) : null);\n            if (url) {\n                if (iconContent.has(url)) {\n                    // sync if it's already loaded\n                    this.svgContent = iconContent.get(url);\n                    this.appendSVGContent(this.svgContent, this.wrapperElement);\n                } else {\n                    // async if it hasn't been loaded\n                    getSvgContent(url).then(() => {\n                        this.svgContent = iconContent.get(url);\n                        this.appendSVGContent(this.svgContent, this.wrapperElement);\n                    });\n                }\n            }\n        }\n    }\n\n    public render() {\n        const flipX = this.flip?.includes('x') ? 'scaleX(-1)' : undefined;\n        const flipY = this.flip?.includes('y') ? 'scaleY(-1)' : undefined;\n        const rotate = this.rotate ? `rotate(${this.rotate}deg` : undefined;\n\n        const transformStyle = [flipX, flipY, rotate].filter(x => x !== undefined).join(' ');\n\n        return (\n            <Host\n                role=\"img\"\n                class={{\n                    spin: !!this.spin,\n                }}\n                style={{\n                    fontSize: this.size ? `${this.size}rem` : null,\n                    transform: transformStyle ?? null,\n                    animationDuration: this.spin ? `${this.spin}ms` : null,\n                    animationName: this.spinReverse ? `spin-reverse` : null,\n                }}>\n                <div class=\"pd-icon-inner\" ref={textarea => (this.wrapperElement = textarea)}></div>\n            </Host>\n        );\n    }\n\n    private appendSVGContent(svgContent: string, appendElement: HTMLElement) {\n        if (appendElement.hasChildNodes()) this.removeAllChildNodes(appendElement);\n\n        const doc = new DOMParser().parseFromString(svgContent, 'image/svg+xml');\n        const svgElement = appendElement.ownerDocument.importNode(doc.documentElement, true);\n\n        // append accessability elements\n        if (this.iconDescription) {\n            const descriptionElement = doc.createElement('desc');\n            descriptionElement.innerHTML = this.iconDescription;\n            svgElement.prepend(descriptionElement);\n        }\n\n        let titleElement = svgElement.getElementsByTagName('title').item(0);\n        if (titleElement && this.iconTitle) titleElement.innerHTML = this.iconTitle;\n        if (!titleElement && this.iconTitle) {\n            titleElement = doc.createElement('title');\n            titleElement.innerHTML = this.iconTitle;\n            svgElement.prepend(titleElement);\n        }\n\n        appendElement.appendChild(svgElement);\n    }\n\n    private removeAllChildNodes(parent) {\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild);\n        }\n    }\n}\n"],"version":3}