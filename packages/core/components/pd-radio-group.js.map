{"file":"pd-radio-group.js","mappings":";;AAAA,MAAM,eAAe,GAAG,sBAAsB;;MCOjCA,cAAY,iBAAAC,kBAAA,CAAA,MAAA,YAAA,SAAAC,CAAA,CAAA;;;;;;;;AAGrB,IAAA,MAAM;AAEN;;AAEG;IACK,IAAI,GAAW,EAAE;AAEzB;;AAEG;IACK,KAAK,GAAW,IAAI;AAE5B;;AAEG;IACK,QAAQ,GAAG,KAAK;AAExB;;AAEG;IACK,KAAK,GAAY,KAAK;AAE9B;;AAEG;IACK,QAAQ,GAAG,KAAK;AAEW,IAAA,QAAQ;AAG3C,IAAA,YAAY,CAAC,QAAgB,EAAA;AACzB,QAAA,IAAI,CAAC,QAAQ;YAAE;QACf,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAyB,KAAI;AAC9C,YAAA,IAAI,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE;AAC1B,gBAAA,KAAK,CAAC,OAAO,GAAG,IAAI;;iBACjB;AACH,gBAAA,KAAK,CAAC,OAAO,GAAG,KAAK;;AAE7B,SAAC,CAAC;;AAIN,IAAA,eAAe,CAAC,QAAiB,EAAA;AAC7B,QAAA,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,QAAQ,CAAC;;AAIhD,IAAA,YAAY,CAAC,QAAiB,EAAA;AAC1B,QAAA,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC;;AAI7C,IAAA,eAAe,CAAC,QAAiB,EAAA;AAC7B,QAAA,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,QAAQ,CAAC;;IAGhD,iBAAiB,CAAC,QAAgB,EAAE,QAAa,EAAA;QAC7C,IAAI,OAAO,QAAQ,KAAK,SAAS;YAAE;QACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAyB,KAAI;AAC9C,YAAA,KAAK,CAAC,QAAQ,CAAC,GAAG,QAAQ;AAC9B,SAAC,CAAC;;AAIN,IAAA,WAAW,CAAC,EAAc,EAAA;QACtB,EAAE,CAAC,eAAe,EAAE;AACpB,QAAA,MAAM,MAAM,GAAG,EAAE,CAAC,MAA4B;QAC9C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;;IAGpC,gBAAgB,GAAA;QACZ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC;QACvD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAyB,KAAI;AAC9C,YAAA,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;AAEtB,YAAA,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;AAC1C,gBAAA,KAAK,CAAC,OAAO,GAAG,IAAI;;iBACjB;AACH,gBAAA,KAAK,CAAC,OAAO,GAAG,KAAK;;AAE7B,SAAC,CAAC;;IAGN,MAAM,GAAA;QACF,QACI,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACD,CAAa,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,CACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["PdRadioGroup","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/pd-radio-group/pd-radio-group.scss?tag=pd-radio-group&encapsulation=shadow","src/components/pd-radio-group/pd-radio-group.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Element, Event, EventEmitter, Host, Listen, Prop, Watch, h } from '@stencil/core';\n\n@Component({\n    tag: 'pd-radio-group',\n    styleUrl: 'pd-radio-group.scss',\n    shadow: true,\n})\nexport class PdRadioGroup {\n    @Element() element: HTMLElement;\n\n    radios: NodeListOf<HTMLPdRadioElement>;\n\n    /**\n     * Name of the radio-group. Used to group radios together\n     */\n    @Prop() name: string = '';\n\n    /**\n     * Value of the radio-group. Used to set the value of the selected radio\n     */\n    @Prop() value: string = null;\n\n    /**\n     * If `true`, the user cannot interact with the radio buttons.\n     */\n    @Prop() disabled = false;\n\n    /**\n     * Shows error state\n     */\n    @Prop() error: boolean = false;\n\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n    @Prop() readonly = false;\n\n    @Event({ eventName: 'pd-change' }) pdChange!: EventEmitter<string>;\n\n    @Watch('value')\n    valueChanged(newValue: string) {\n        if (!newValue) return;\n        this.radios.forEach((radio: HTMLPdRadioElement) => {\n            if (radio.value === newValue) {\n                radio.checked = true;\n            } else {\n                radio.checked = false;\n            }\n        });\n    }\n\n    @Watch('disabled')\n    disabledChanged(newValue: boolean) {\n        this.handlePropChanged('disabled', newValue);\n    }\n\n    @Watch('error')\n    errorChanged(newValue: boolean) {\n        this.handlePropChanged('error', newValue);\n    }\n\n    @Watch('readonly')\n    readonlyChanged(newValue: boolean) {\n        this.handlePropChanged('readonly', newValue);\n    }\n\n    handlePropChanged(propName: string, newValue: any) {\n        if (typeof newValue !== 'boolean') return;\n        this.radios.forEach((radio: HTMLPdRadioElement) => {\n            radio[propName] = newValue;\n        });\n    }\n\n    @Listen('change')\n    radioChange(ev: InputEvent) {\n        ev.stopPropagation();\n        const target = ev.target as HTMLPdRadioElement;\n        this.pdChange.emit(target.value);\n    }\n\n    componentDidLoad() {\n        this.radios = this.element.querySelectorAll('pd-radio');\n        this.radios.forEach((radio: HTMLPdRadioElement) => {\n            radio.name = this.name;\n\n            if (this.value && radio.value === this.value) {\n                radio.checked = true;\n            } else {\n                radio.checked = false;\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Host>\n                <slot></slot>\n            </Host>\n        );\n    }\n}\n"],"version":3}