{"file":"pd-sort.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/pd-sort/pd-sort.scss?tag=pd-sort&encapsulation=shadow","src/components/pd-sort/pd-sort.tsx"],"sourcesContent":["@include resetControlFonts;\n\n*,\n::before,\n::after {\n    box-sizing: border-box;\n    outline: none;\n}\n\n.pd-sort {\n    position: relative;\n    display: inline-block;\n\n    .pd-sort-button {\n        color: $cyan-9;\n        background-color: transparent;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        padding: 0;\n\n        .pd-sort-text {\n            text-align: left;\n            text-overflow: ellipsis;\n            overflow-x: hidden;\n            white-space: nowrap;\n            min-height: 1.5rem;\n        }\n\n        .pd-sort-caret {\n            fill: setcolor(primary, enabled);\n        }\n\n        &:hover:enabled {\n            .pd-sort-caret {\n                fill: setcolor(primary, hover);\n            }\n            .pd-sort-text {\n                color: setcolor(primary, hover);\n            }\n        }\n\n        &:disabled {\n            cursor: default;\n            .pd-sort-caret {\n                fill: $gray;\n            }\n        }\n\n        &:focus-visible {\n            .pd-sort-caret {\n                fill: $blue-whale;\n            }\n        }\n    }\n}\n\n.pd-sort-menu {\n    background-color: $white;\n    border: 0.125em solid $cyan-9;\n    border-radius: 0.25rem;\n    z-index: 100;\n    overflow: auto;\n\n    .pd-sort-menu-bottom-separator {\n        border-top: 0.125em solid $cyan-9;\n    }\n}\n","import { createPopper, Instance } from '@popperjs/core';\nimport {\n    Component,\n    ComponentDidLoad,\n    ComponentDidUpdate,\n    ComponentInterface,\n    ComponentWillLoad,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Listen,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { SortDropdownItem, SortRevertItem } from '../../types';\n\n@Component({\n    tag: 'pd-sort',\n    styleUrl: 'pd-sort.scss',\n    shadow: true,\n})\nexport class Dropdown implements ComponentInterface, ComponentWillLoad, ComponentDidLoad, ComponentDidUpdate {\n    private menuElement: HTMLElement;\n    private buttonElement: HTMLElement;\n    private popper: Instance;\n\n    @Element() element: HTMLElement;\n\n    @State() open: boolean = false;\n    @State() selectedItem: SortDropdownItem;\n\n    /**\n     * Placeholder when no item is selected\n     */\n    @Prop() placeholder: string = '';\n\n    /**\n     * Items to display and select in dropdown\n     */\n    @Prop() items: SortDropdownItem[] = [];\n\n    /**\n     * Items visible in dropdown\n     */\n    @Prop() itemCount: number = 7;\n\n    /**\n     * Enable selection of an empty item\n     */\n    @Prop() emptyItem: boolean = false;\n\n    /**\n     * Data used for the empty item\n     */\n    @Prop() emptyItemData: SortDropdownItem = {\n        id: '0',\n        label: '-',\n        value: null,\n        sort: null,\n    };\n\n    /**\n     * Enables the revert item at the bottom of the dropdown\n     */\n    @Prop() reverseItem: boolean = false;\n\n    /**\n     * Data used for the reverse item at the bottom of the dropdown\n     */\n    @Prop() reverseItemData: SortRevertItem = {\n        label: 'Sort. Umkehren',\n        selected: false,\n    };\n\n    /**\n     * If `true`, the user cannot interact with the input.\n     */\n    @Prop() disabled = false;\n\n    /**\n     * Label\n     */\n    @Prop() label: string = 'Sortieren nach:';\n\n    @Event({ eventName: 'pd-change' }) pdChange: EventEmitter<SortDropdownItem>;\n    @Event({ eventName: 'pd-reverse' }) pdReverse: EventEmitter<SortDropdownItem>;\n\n    /**\n     * Set a preselected entry by index\n     */\n    @Method()\n    async setSelectedIndex(index: number) {\n        if (index >= 0 && index < this.items.length) {\n            this.items[index] = { ...this.items[index], selected: true };\n            this.selectedItem = this.items[index];\n        }\n    }\n\n    /**\n     * Reset the selection of the dropdown\n     */\n    @Method()\n    async reset() {\n        this.selectedItem = null;\n    }\n\n    @Listen('click', { target: 'body' })\n    handleClick(ev: MouseEvent) {\n        if (!ev.composedPath().includes(this.element)) this.open = false;\n    }\n\n    @Listen('keydown')\n    handleKeyDown(ev: KeyboardEvent) {\n        switch (ev.key) {\n            case 'Tab': {\n                this.open = false;\n                break;\n            }\n            case 'Escape':\n            case 'Enter': {\n                ev.preventDefault();\n                this.open = false;\n                break;\n            }\n\n            case 'ArrowDown': {\n                ev.preventDefault();\n                const currentIndex = this.items.findIndex(item => item === this.selectedItem);\n                const nextIndex = currentIndex >= this.items.length - 1 ? currentIndex : currentIndex + 1;\n                const nextItem = this.items[nextIndex];\n                if (nextItem !== this.selectedItem) this.selectItem(nextItem);\n                break;\n            }\n            case 'ArrowUp': {\n                ev.preventDefault();\n                const currentIndex = this.items.findIndex(item => item === this.selectedItem);\n                const previousIndex = currentIndex <= 0 ? currentIndex : currentIndex - 1;\n                const previousItem = this.items[previousIndex];\n                if (previousItem !== this.selectedItem) this.selectItem(previousItem);\n                break;\n            }\n        }\n    }\n\n    private selectItem(item: SortDropdownItem, closeDropdown: boolean = false) {\n        this.selectedItem = item;\n        if (this.reverseItem && this.reverseItemData.selected) {\n            this.reverseItemData.selected = false;\n        }\n        if (closeDropdown) this.open = false;\n        this.pdChange.emit(item);\n    }\n    private reverseItemClicked() {\n        if (!this.selectedItem) return;\n\n        // If we already have a reverse item selected, we reselect the already selected item which will trigger the pdChange event and unselect the reverse item\n        if (this.reverseItemData.selected) {\n            this.selectItem(this.selectedItem, true);\n            return;\n        }\n        this.reverseItemData.selected = true;\n        this.open = false;\n        this.pdReverse.emit(this.selectedItem);\n    }\n\n    private toggleDropdown = () => {\n        if (!this.disabled) this.open = !this.open;\n    };\n\n    public componentWillLoad() {\n        this.selectedItem = this.items.find(item => item.selected);\n    }\n\n    public componentDidLoad() {\n        this.popper = this.createMenuPopper(this.buttonElement, this.menuElement);\n    }\n\n    public componentDidUpdate() {\n        this.popper = this.createMenuPopper(this.buttonElement, this.menuElement);\n\n        if (this.open) this.popper.forceUpdate();\n    }\n\n    // create a popper js element for the menu\n    private createMenuPopper(button, menu) {\n        return createPopper(button, menu, {\n            placement: 'bottom-end',\n            modifiers: [\n                {\n                    name: 'offset',\n                    options: {\n                        offset: [-12, 0],\n                    },\n                },\n            ],\n        });\n    }\n\n    public render() {\n        return (\n            <Host>\n                <div\n                    class={{\n                        'pd-sort': true,\n                    }}\n                >\n                    <button\n                        ref={el => (this.buttonElement = el)}\n                        class=\"pd-sort-button\"\n                        type=\"button\"\n                        aria-haspopup=\"true\"\n                        aria-expanded={`${this.open}`}\n                        onClick={this.toggleDropdown}\n                        disabled={this.disabled}\n                        data-test=\"pd-sort-button\"\n                    >\n                        <span class={{ 'pd-sort-text': true }} data-test=\"pd-dropdown-text\">\n                            {this.label + ' '}\n                            {this.selectedItem?.label || this.placeholder}\n                        </span>\n                        <pd-icon class=\"pd-sort-caret\" name=\"dropdown\" rotate={this.open ? 180 : 0} size={2.4} lazy={false}></pd-icon>\n                    </button>\n                    {this.renderDropDown()}\n                </div>\n            </Host>\n        );\n    }\n\n    private renderDropDown() {\n        return (\n            <div\n                ref={el => (this.menuElement = el)}\n                class={`pd-sort-menu`}\n                style={{\n                    display: this.open ? 'block' : 'none',\n                    maxHeight: `calc(3em * ${this.itemCount} + 0.5em)`,\n                }}\n                tabIndex={-1}\n            >\n                {this.renderEmptyItem()}\n                {this.renderDropDownItems()}\n                {this.renderReverseItem()}\n            </div>\n        );\n    }\n\n    private renderDropDownItems() {\n        return this.items\n            .filter(item => item.sort)\n            .map((item, i) => (\n                <pd-dropdown-item\n                    value={item.label}\n                    selected={item.id === this.selectedItem?.id || false}\n                    onClick={() => this.selectItem(item, true)}\n                    data-test={`pd-sort-item-${i}`}\n                ></pd-dropdown-item>\n            ));\n    }\n\n    private renderReverseItem() {\n        if (!this.reverseItem || !this.selectedItem) return;\n        return (\n            <div class=\"pd-sort-menu-bottom-separator\">\n                <pd-dropdown-item\n                    value={this.reverseItemData.label}\n                    selected={this.reverseItemData.selected || false}\n                    onClick={() => this.reverseItemClicked()}\n                    data-test={`pd-sort-revert-item`}\n                ></pd-dropdown-item>\n            </div>\n        );\n    }\n\n    private renderEmptyItem() {\n        if (!this.emptyItem) return;\n        return (\n            <pd-dropdown-item\n                value={this.emptyItemData.label}\n                selected={this.emptyItemData.id === this.selectedItem?.id || false}\n                onClick={() => this.selectItem(this.emptyItemData, true)}\n                data-test={`pd-sort-item-empty`}\n            ></pd-dropdown-item>\n        );\n    }\n}\n"],"version":3}