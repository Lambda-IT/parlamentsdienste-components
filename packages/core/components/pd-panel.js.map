{"file":"pd-panel.js","mappings":";;;AAAA,MAAM,UAAU,GAAG,shBAAshB;;MC0B5hB,KAAK,iBAAAA,kBAAA,CAAA,MAAA,KAAA,SAAAC,CAAA,CAAA;;;;;;;;AAGN,IAAA,qBAAqB;AACrB,IAAA,WAAW;IAEV,KAAK,GAAY,KAAK;AAE/B;;AAEG;IACK,SAAS,GAAY,KAAK;AAElC;;AAEG;IACK,WAAW,GAAY,KAAK;AAEpC;;AAEG;IACK,QAAQ,GAAY,KAAK;AAEjC;;AAEG;AACmC,IAAA,WAAW;IAGjD,MAAM,YAAY,CAAC,SAAkB,EAAA;AACjC,QAAA,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC;YACpC,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC;YAC9C,IAAI,SAAS,EAAE;AACX,gBAAA,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC;;iBACjC;AACH,gBAAA,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;;;;AAM9C,IAAA,WAAW,CAAC,EAAe,EAAA;QACvB,EAAE,CAAC,eAAe,EAAE;AACpB,QAAA,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM;;IAGnB,iBAAiB,GAAA;QACpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,iBAAiB,CAA6B;;IAGzF,gBAAgB,GAAA;;AAEnB,QAAA,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG;YAC7C,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ;;;IAIrD,MAAM,GAAA;QACT,QACI,CAAA,CAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EACD,KAAK,EAAE;gBACH,mBAAmB,EAAE,IAAI,CAAC,QAAQ;AAClC,gBAAA,gBAAgB,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW;gBAChD,4BAA4B,EAAE,IAAI,CAAC,SAAS;AAC/C,aAAA,EAAA,EACD,CAAM,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,QAAQ,EAAQ,CAAA,EAC3B,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACI,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC,EAC5C,KAAK,EAAE;AACH,gBAAA,0BAA0B,EAAE,IAAI;gBAChC,4BAA4B,EAAE,IAAI,CAAC,SAAS;AAC5C,gBAAA,2BAA2B,EAAE,CAAC,IAAI,CAAC,SAAS;AAC/C,aAAA,EACc,eAAA,EAAA,IAAI,CAAC,SAAS,GAAG,OAAO,GAAG,MAAM,EAAA,EAChD,CAAa,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,EACb,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,IAAI,EAAC,QAAQ,GAAQ,CACzB,CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/pd-panel/pd-panel.scss?tag=pd-panel&encapsulation=shadow","src/components/pd-panel/pd-panel.tsx"],"sourcesContent":["/**\n * @prop --pd-panel-background: Background color of panel\n * @prop --pd-panel-subpanel-margin: margin of subpanel. Can be used to separate and indent subpanels\n */\n:host {\n    display: block;\n    background-color: var(--pd-panel-background, $white);\n    border-radius: 0.25rem;\n}\n\n*,\n::before,\n::after {\n    box-sizing: border-box;\n    outline: none;\n}\n\n.pd-panel-content-wrapper {\n    transition: height 0.3s ease-in-out;\n    height: auto;\n}\n\n/** Subpanel **/\n\n:host(.pd-panel-subpanel) {\n    border-top: 0.125rem solid $gray-6;\n    border-radius: 0;\n    margin: var(--pd-panel-subpanel-margin, 0);\n    --pd-panel-content-padding: 0.5rem 0 1rem 0;\n}\n\n:host(.pd-panel-subpanel.pd-panel-content-collapsed) {\n    border-bottom: 0.125rem solid $gray-6;\n}\n\n:host(.pd-panel-subpanel.pd-panel-hover) {\n    border-color: $black;\n}\n","import {\n    Component,\n    ComponentDidLoad,\n    ComponentInterface,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Listen,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { collapse, expand } from '../../utils';\n\n/**\n * @slot header - panel header content\n * @slot - main content\n * @slot footer - panel footer content\n */\n@Component({\n    tag: 'pd-panel',\n    styleUrl: 'pd-panel.scss',\n    shadow: true,\n})\nexport class Panel implements ComponentInterface, ComponentDidLoad {\n    @Element() element: HTMLElement;\n\n    private contentWrapperElement: HTMLElement;\n    private panelHeader?: HTMLPdPanelHeaderElement;\n\n    @State() hover: boolean = false;\n\n    /**\n     * Expands / collapses the panel content\n     */\n    @Prop() collapsed: boolean = false;\n\n    /**\n     * Show/hide collapse button\n     */\n    @Prop() collapsible: boolean = false;\n\n    /**\n     * Use as a subpanel\n     */\n    @Prop() subpanel: boolean = false;\n\n    /**\n     * Emitted when the value has changed.\n     */\n    @Event({ eventName: 'pd-collapsed' }) pdCollapsed!: EventEmitter<any>;\n\n    @Watch('collapsed')\n    async valueChanged(collapsed: boolean) {\n        if (this.collapsible) {\n            this.pdCollapsed.emit({ collapsed });\n            await this.panelHeader.setCollapsed(collapsed);\n            if (collapsed) {\n                collapse(this.contentWrapperElement);\n            } else {\n                expand(this.contentWrapperElement);\n            }\n        }\n    }\n\n    @Listen('pd-hover')\n    handleHover(ev: CustomEvent) {\n        ev.stopPropagation();\n        this.hover = ev.detail;\n    }\n\n    public connectedCallback() {\n        this.panelHeader = this.element.querySelector('pd-panel-header') as HTMLPdPanelHeaderElement;\n    }\n\n    public componentDidLoad() {\n        // start collapsed\n        if (this.collapsed) {\n            this.contentWrapperElement.style.height = '0';\n            this.contentWrapperElement.style.overflow = 'hidden';\n        }\n    }\n\n    public render() {\n        return (\n            <Host\n                class={{\n                    'pd-panel-subpanel': this.subpanel,\n                    'pd-panel-hover': this.hover && this.collapsible,\n                    'pd-panel-content-collapsed': this.collapsed,\n                }}>\n                <slot name=\"header\"></slot>\n                <div\n                    ref={el => (this.contentWrapperElement = el)}\n                    class={{\n                        'pd-panel-content-wrapper': true,\n                        'pd-panel-content-collapsed': this.collapsed,\n                        'pd-panel-content-expanded': !this.collapsed,\n                    }}\n                    aria-expanded={this.collapsed ? 'false' : 'true'}>\n                    <slot></slot>\n                    <slot name=\"footer\"></slot>\n                </div>\n            </Host>\n        );\n    }\n}\n"],"version":3}