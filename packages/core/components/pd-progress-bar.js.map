{"file":"pd-progress-bar.js","mappings":";;;AAAA,MAAM,gBAAgB,GAAG,orCAAorC;;MCQhsC,WAAW,iBAAAA,kBAAA,CAAA,MAAA,WAAA,SAAAC,CAAA,CAAA;;;;;;AACpB;;AAEG;IACK,KAAK,GAA0D,SAAS;AAEhF;;AAEG;IACK,KAAK,GAAW,GAAG;AAE3B;;AAEG;IACK,KAAK,GAAY,KAAK;AAE9B;;AAEG;IACK,QAAQ,GAAW,CAAC;AAE5B;;AAEG;IACK,OAAO,GAAY,KAAK;IAEzB,MAAM,GAAA;QACT,OAAO,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAQ;;AAGnE,IAAA,iBAAiB,CAAC,KAAa,EAAE,QAAA,GAAmB,CAAC,EAAA;AACzD,QAAA,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC;AAC1C,QAAA,MAAM,OAAO,GAAG,UAAU,CAAC,CAAC,UAAU,GAAG,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEhE,QAAA,QACI,CAAA,CAAA,KAAA,EAAA,EAAK,KAAK,EAAC,4BAA4B,EAAA,EACnC,CAAA,CAAA,KAAA,EAAA,EACI,KAAK,EAAE;AACH,gBAAA,iBAAiB,EAAE,IAAI;gBACvB,yBAAyB,EAAE,IAAI,CAAC,OAAO;gBACvC,CAAC,CAAA,gBAAA,EAAmB,IAAI,CAAC,KAAK,CAAA,CAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK;AAClD,aAAA,EACD,KAAK,EAAE,EAAE,KAAK,EAAE,CAAA,EAAG,OAAO,CAAA,CAAA,CAAG,EAAE,EAAA,WAAA,EACrB,iBAAiB,EAAA,EAE1B,IAAI,CAAC,KAAK,GAAG,GAAG,OAAO,CAAA,CAAA,CAAG,GAAG,EAAE,CAC9B,CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/pd-progress-bar/pd-progress-bar.scss?tag=pd-progress-bar&encapsulation=shadow","src/components/pd-progress-bar/pd-progress-bar.tsx"],"sourcesContent":["@include resetControlFonts;\n\n$progress-height: 1rem;\n\n:host {\n    display: flex;\n    position: relative;\n}\n\n*,\n::before,\n::after {\n    box-sizing: border-box;\n    outline: none;\n}\n\n.pd-progress-bar-background {\n    display: flex;\n    height: $progress-height;\n    overflow: hidden;\n    font-size: 0.75em;\n    line-height: $progress-height;\n    background-color: $gray-3;\n    border-radius: 0.25em;\n    width: 100%;\n}\n\n.pd-progress-bar {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    overflow: hidden;\n    text-align: center;\n    white-space: nowrap;\n    width: 100%;\n    height: $progress-height;\n    background-color: setcolor(primary, enabled);\n    transform-origin: left top;\n    transition: width 200ms ease;\n    color: setcolor(primary, enabledContrast);\n\n    &.pd-progress-bar-success {\n        background-color: setcolor(success, hover);\n        color: setcolor(success, hoverContrast);\n    }\n\n    &.pd-progress-bar-warning {\n        background-color: setcolor(warning, hover);\n        color: setcolor(warning, hoverContrast);\n    }\n\n    &.pd-progress-bar-danger {\n        background-color: setcolor(danger, hover);\n        color: setcolor(danger, hoverContrast);\n    }\n\n    &.pd-progress-bar-info {\n        background-color: setcolor(info, hover);\n        color: setcolor(info, hoverContrast);\n    }\n}\n\n.pd-progress-bar-striped {\n    background-image: linear-gradient(\n        45deg,\n        rgba(255, 255, 255, 0.15) 25%,\n        transparent 25%,\n        transparent 50%,\n        rgba(255, 255, 255, 0.15) 50%,\n        rgba(255, 255, 255, 0.15) 75%,\n        transparent 75%,\n        transparent\n    );\n    background-size: 1rem 1rem;\n}\n","import { Component, ComponentInterface, h, Host, Prop } from '@stencil/core';\nimport { clamp } from '../../utils';\n\n@Component({\n    tag: 'pd-progress-bar',\n    styleUrl: 'pd-progress-bar.scss',\n    shadow: true,\n})\nexport class ProgressBar implements ComponentInterface {\n    /**\n     * status color of progress-bar\n     */\n    @Prop() color: 'primary' | 'success' | 'danger' | 'warning' | 'info' = 'primary';\n\n    /**\n     * current value of progress bar 0.0 to 1.0\n     */\n    @Prop() value: number = 0.0;\n\n    /**\n     * description of progress-bar\n     */\n    @Prop() label: boolean = false;\n\n    /**\n     * decimals of value\n     */\n    @Prop() decimals: number = 2;\n\n    /**\n     * show striped version of progress-bar\n     */\n    @Prop() striped: boolean = false;\n\n    public render() {\n        return <Host>{this.renderDeterminate(this.value, this.decimals)}</Host>;\n    }\n\n    private renderDeterminate(value: number, decimals: number = 2) {\n        const finalValue = clamp(0, value, 1) || 0;\n        const percent = parseFloat((finalValue * 100).toFixed(decimals));\n\n        return (\n            <div class=\"pd-progress-bar-background\">\n                <div\n                    class={{\n                        'pd-progress-bar': true,\n                        'pd-progress-bar-striped': this.striped,\n                        [`pd-progress-bar-${this.color}`]: !!this.color,\n                    }}\n                    style={{ width: `${percent}%` }}\n                    data-test=\"pd-progress-bar\"\n                >\n                    {this.label ? `${percent}%` : ''}\n                </div>\n            </div>\n        );\n    }\n}\n"],"version":3}