{"file":"p-B890ZVNx.js","mappings":";;;;AAAA,MAAM,iBAAiB,GAAG,+/BAA+/B;;MCO5gC,YAAY,iBAAAA,kBAAA,CAAA,MAAA,YAAA,SAAAC,CAAA,CAAA;;;;;;;AAGrB;;AAEG;IACK,KAAK,GAAW,EAAE;AAE1B;;AAEG;IACK,QAAQ,GAAY,KAAK;AAEjC;;AAEG;IACK,WAAW,GAAG,KAAK;AAE3B;;AAEG;AACK,IAAA,SAAS;AAEjB;;AAEG;AACK,IAAA,QAAQ;AAEhB;;AAEG;AACK,IAAA,OAAO;IAER,MAAM,GAAA;AACT,QAAA,QACI,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACD,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAK,KAAK,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,2BAA2B,EAAE,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAA,EACpG,IAAI,CAAC,WAAW,GAAG,CAAa,CAAA,aAAA,EAAA,EAAA,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAA,CAAgB,GAAG,IAAI,EAC7E,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,IAC1B,CAAM,CAAA,MAAA,EAAA,EAAA,KAAK,EAAC,uBAAuB,EAAA,EAC/B,CAAS,CAAA,SAAA,EAAA,EAAA,IAAI,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC,EAAY,CAAA,CACjF,KAEP,EAAE,CACL,EACD,CAAM,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAA,WAAA,EAAY,uBAAuB,EAAQ,CAAA,CAC7G,CACH;;AAIP,IAAA,YAAY,CAAC,MAAM,EAAA;QACvB,OAAO,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;;IAGjD,MAAM,GAAG,CAAC,KAAa,EAAE,MAAiB,GAAA,SAAS,KAAI;AAC3D,QAAA,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,KAAK;AAChD,QAAA,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA,SAAA,CAAW,EAAE,IAAI,CAAC;QAC/E,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,yBAAyB,CAAC;AAC3D,KAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/pd-dropdown-item/pd-dropdown-item.scss?tag=pd-dropdown-item&encapsulation=shadow","src/components/pd-dropdown-item/pd-dropdown-item.tsx"],"sourcesContent":["@include resetControlFonts;\n\n:host {\n    display: block;\n}\n\n*,\n::before,\n::after {\n    box-sizing: border-box;\n    outline: none;\n}\n\n:host(.pd-dropdown-current-navigating-item) {\n    background-color: $focus;\n    color: $pd-black;\n}\n\n.pd-dropdown-item {\n    width: 100%;\n    padding: 0.75rem 0.825rem;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    height: 3rem;\n\n    &:hover {\n        background-color: $focus;\n        color: $pd-black;\n    }\n\n    &:active {\n        background-color: setcolor(primary, pressed);\n        color: setcolor(primary, pressedContrast);\n    }\n\n    strong {\n        font-weight: bold;\n    }\n\n    span {\n        white-space: pre;\n        overflow-x: hidden;\n        text-overflow: ellipsis;\n    }\n\n    &.pd-dropdown-item-selected {\n        background-color: setcolor(primary, readonly);\n        color: $pd-black;\n\n        &:hover {\n            background-color: $focus;\n            color: $pd-black;\n        }\n\n        &:active {\n            background-color: setcolor(primary, pressed);\n            color: setcolor(primary, pressedContrast);\n        }\n    }\n\n    .pd-dropdown-item-icon {\n        margin-left: -0.25rem;\n        margin-right: 0.25rem;\n        flex: 0 0 2rem;\n    }\n}\n","import { Component, ComponentInterface, Element, h, Host, Prop } from '@stencil/core';\n\n@Component({\n    tag: 'pd-dropdown-item',\n    styleUrl: 'pd-dropdown-item.scss',\n    shadow: true,\n})\nexport class DropdownItem implements ComponentInterface {\n    @Element() element!: HTMLElement;\n\n    /**\n     * Value for this item\n     */\n    @Prop() value: string = '';\n\n    /**\n     * Sets this item to selected\n     */\n    @Prop() selected: boolean = false;\n\n    /**\n     * If `true`, the item displays a checkbox (for multiselect comboboxes).\n     */\n    @Prop() multiselect = false;\n\n    /**\n     * Find an highlight this text in value\n     */\n    @Prop() highlight?: string | number;\n\n    /**\n     * Displays an item from the provided gallery\n     */\n    @Prop() iconName?: string;\n\n    /**\n     * Specifies the `src` url of an SVG file to use as icon.\n     */\n    @Prop() iconSrc?: string;\n\n    public render() {\n        return (\n            <Host>\n                <div class={{ 'pd-dropdown-item': true, 'pd-dropdown-item-selected': this.selected && !this.multiselect }}>\n                    {this.multiselect ? <pd-checkbox checked={this.selected}></pd-checkbox> : null}\n                    {this.iconName || this.iconSrc ? (\n                        <span class=\"pd-dropdown-item-icon\">\n                            <pd-icon name={this.iconName ?? null} src={this.iconSrc ?? null} size={2}></pd-icon>\n                        </span>\n                    ) : (\n                        ''\n                    )}\n                    <span innerHTML={this.strong(this.value, this.highlight?.toString())} data-test=\"pd-dropdown-item-text\"></span>\n                </div>\n            </Host>\n        );\n    }\n\n    private escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n    }\n\n    private strong = (value: string, strong: string = undefined) => {\n        if (!strong || strong.length === 0) return value;\n        const regexp = new RegExp(`((.*?)(${this.escapeRegExp(strong)})(.*?))+?`, 'gi');\n        return value.replace(regexp, '$2<strong>$3</strong>$4');\n    };\n}\n"],"version":3}