{"file":"pd-textarea.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/pd-textarea/pd-textarea.scss?tag=pd-textarea&encapsulation=shadow","src/components/pd-textarea/pd-textarea.tsx"],"sourcesContent":["@include resetControlFonts;\n\n:host {\n    display: block;\n}\n\n*,\n::before,\n::after {\n    box-sizing: border-box;\n    appearance: none;\n    outline: none;\n}\n\n.pd-textarea-label {\n    width: 100%;\n    margin-bottom: 0;\n    max-width: 100%;\n\n    .pd-textarea-label-text {\n        padding-bottom: 0.25rem;\n        font-size: 0.875rem;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n}\n\n/**\n * @prop --pd-input-vertical-adjust: top margin of textarea\n */\n.pd-textarea {\n    display: block;\n    padding: 0.625rem 0.875rem;\n    border-radius: 0.25rem;\n    border: 0.125rem solid setcolor(primary, enabled);\n    width: 100%;\n    margin-top: var(--pd-input-vertical-adjust, inherit);\n\n    &:hover:enabled {\n        border-color: setcolor(primary, hover);\n    }\n\n    &:disabled {\n        border-color: setcolor(primary, disabled);\n        background-color: transparent;\n        font-style: italic;\n        color: setcolor(primary, disabledContrast);\n    }\n\n    &:focus-visible:enabled {\n        background: $yellow-1;\n    }\n\n    &.pd-textarea-readonly {\n        background-color: $gray-3;\n        border-color: $gray-3;\n\n        &:hover:enabled,\n        &:disabled,\n        &:focus-visible:enabled {\n            border-color: $gray-3;\n            cursor: default;\n            background-color: $gray-3;\n        }\n    }\n\n    &.pd-textarea-error {\n        border-color: $input-error-border;\n        background: $red-3;\n\n        &:hover:enabled {\n            border-color: setcolor(danger, hover);\n        }\n    }\n\n    &.pd-textarea-autogrow {\n        resize: none;\n        overflow-x: hidden; // fixes issue with height (1 row) in Firefox\n    }\n}\n\n.pd-textarea-label-viewonly {\n    font-weight: 700;\n}\n\n.pd-textarea-viewonly {\n    display: block;\n    margin: 0;\n    padding: 0.125rem 0 0.75rem 0;\n}\n","import { Component, ComponentDidLoad, ComponentInterface, Event, EventEmitter, h, Host, Method, Prop, readTask, Watch } from '@stencil/core';\n\n@Component({\n    tag: 'pd-textarea',\n    styleUrl: 'pd-textarea.scss',\n    shadow: true,\n})\nexport class Textarea implements ComponentInterface, ComponentDidLoad {\n    private nativeInput?: HTMLTextAreaElement;\n\n    /**\n     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n     */\n    @Prop() autocapitalize = 'none';\n\n    /**\n     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n     */\n    @Prop() autofocus = false;\n\n    /**\n     * If `true`, the user cannot interact with the textarea.\n     */\n    @Prop() disabled = false;\n\n    /**\n     * If `true`, the textarea is replaced with a simple text\n     */\n    @Prop() viewOnly = false;\n\n    /**\n     * A hint to the browser for which keyboard to display.\n     * Possible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n     * `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.\n     */\n    @Prop() inputmode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n\n    /**\n     * A hint to the browser for which enter key to display.\n     * Possible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n     * `\"previous\"`, `\"search\"`, and `\"send\"`.\n     */\n    @Prop() enterkeyhint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\n\n    /**\n     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.\n     */\n    @Prop() maxlength?: number;\n\n    /**\n     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.\n     */\n    @Prop() minlength?: number;\n\n    /**\n     * Instructional text that shows before the input has a value.\n     */\n    @Prop() placeholder?: string;\n\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n    @Prop() readonly = false;\n\n    /**\n     * If `true`, the user must fill in a value before submitting a form.\n     */\n    @Prop() required = false;\n\n    /**\n     * If `true`, the element will have its spelling and grammar checked.\n     */\n    @Prop() spellcheck = false;\n\n    /**\n     * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.\n     */\n    @Prop() cols?: number;\n\n    /**\n     * The number of visible text lines for the control.\n     */\n    @Prop() rows?: number = 1;\n\n    /**\n     * Indicates how the control wraps text.\n     */\n    @Prop() wrap?: 'hard' | 'soft' | 'off';\n\n    /**\n     * Label text\n     */\n    @Prop() label?: string;\n\n    /**\n     * Shows error state\n     */\n    @Prop() error: boolean = false;\n\n    /**\n     * If `true`, the element height will increase based on the value.\n     */\n    @Prop() autoGrow = false;\n\n    /**\n     * The value of the textarea.\n     */\n    @Prop({ mutable: true }) value?: string = '';\n\n    /**\n     * Update the native input element when the value changes\n     */\n    @Watch('value')\n    valueChanged() {\n        const nativeInput = this.nativeInput;\n        const value = this.getValue();\n        if (nativeInput && nativeInput.value !== value) {\n            nativeInput.value = value;\n        }\n        this.runAutoGrow();\n        this.pdChange.emit({ value });\n    }\n\n    /**\n     * Emitted when the input value has changed.\n     */\n    @Event({ eventName: 'pd-change' }) pdChange!: EventEmitter<any>;\n\n    /**\n     * Emitted when a keyboard input occurred.\n     */\n    @Event({ eventName: 'pd-input' }) pdInput!: EventEmitter<KeyboardEvent>;\n\n    /**\n     * Emitted when the input loses focus.\n     */\n    @Event({ eventName: 'pd-blur' }) pdBlur!: EventEmitter<FocusEvent>;\n\n    /**\n     * Emitted when the input has focus.\n     */\n    @Event({ eventName: 'pd-focus' }) pdFocus!: EventEmitter<FocusEvent>;\n\n    /**\n     * Sets focus on the native `textarea` in `pd-textarea`. Use this method instead of the global\n     * `textarea.focus()`.\n     */\n    @Method()\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n\n    public componentDidLoad() {\n        requestAnimationFrame(() => this.runAutoGrow());\n    }\n\n    private runAutoGrow() {\n        const nativeInput = this.nativeInput;\n        if (nativeInput && this.autoGrow) {\n            readTask(() => {\n                const borderWidth = parseFloat(window.getComputedStyle(nativeInput, null).getPropertyValue('border-width'));\n                nativeInput.style.height = 'auto';\n                nativeInput.style.height = nativeInput.scrollHeight + 2 * borderWidth + 'px';\n            });\n        }\n    }\n\n    private getValue(): string {\n        return this.value || '';\n    }\n\n    private onInput = (ev: Event) => {\n        if (this.nativeInput) {\n            this.value = this.nativeInput.value;\n        }\n        this.pdInput.emit(ev as KeyboardEvent);\n    };\n\n    private onFocus = (ev: FocusEvent) => {\n        this.pdFocus.emit(ev);\n    };\n\n    private onBlur = (ev: FocusEvent) => {\n        if (!this.disabled || !this.readonly) this.pdBlur.emit(ev);\n    };\n\n    public render() {\n        const value = this.getValue();\n\n        return (\n            <Host>\n                <label class=\"pd-textarea-label\">\n                    {this.label ? (\n                        <div\n                            class={{\n                                'pd-textarea-label-text': true,\n                                'pd-textarea-label-viewonly': this.viewOnly,\n                            }}\n                            data-test=\"pd-textarea-label\"\n                        >\n                            {this.label}\n                        </div>\n                    ) : (\n                        ''\n                    )}\n                    {!this.viewOnly ? (\n                        <textarea\n                            class={{\n                                'pd-textarea': true,\n                                'pd-textarea-readonly': this.readonly,\n                                'pd-textarea-error': this.error,\n                                'pd-textarea-autogrow': this.autoGrow,\n                            }}\n                            ref={textarea => (this.nativeInput = textarea)}\n                            autoCapitalize={this.autocapitalize}\n                            autoFocus={this.autofocus}\n                            enterKeyHint={this.enterkeyhint}\n                            inputMode={this.inputmode}\n                            disabled={this.disabled}\n                            maxLength={this.maxlength}\n                            minLength={this.minlength}\n                            placeholder={this.placeholder || ''}\n                            readOnly={this.readonly}\n                            required={this.required}\n                            spellcheck={this.spellcheck}\n                            cols={this.cols}\n                            rows={this.rows}\n                            wrap={this.wrap}\n                            onInput={this.onInput}\n                            onBlur={this.onBlur}\n                            onFocus={this.onFocus}\n                            data-test=\"pd-textarea\"\n                            tabIndex={this.readonly ? -1 : undefined}\n                        >\n                            {value}\n                        </textarea>\n                    ) : (\n                        <p class=\"pd-textarea-viewonly\">{this.value}</p>\n                    )}\n                </label>\n            </Host>\n        );\n    }\n}\n"],"version":3}