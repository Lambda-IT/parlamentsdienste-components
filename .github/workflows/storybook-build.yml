name: storybook build

on:
    # push:
    #   branches:
    #     - main
    workflow_dispatch:
        inputs:
            tag:
                description: 'Container Tag'
                default: 'dev'

concurrency: deploy-${{ github.ref }}

env:
    DOCKER_CONFIG: $HOME/.docker
    STORYBOOK_IMAGE: lambda-it/parlamentsdienste-components/storybook
    TAG: 'dev'
    REGISTRY: ghcr.io

jobs:
    # ------------------------------------------------------------
    build-storybook:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Cache Docker layers
              uses: actions/cache@v4
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: Login to ghcr.io
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5

            - name: Debug Log
              shell: bash
              run: |
                  echo "ℹ️ DEBUG LOG ⚠️"
                  echo "GITHUB_ACTOR: $GITHUB_ACTOR"
                  echo "META Lables: ${{ steps.meta.outputs.labels }}"
                  echo "image: ${{ env.STORYBOOK_IMAGE }}"
                  echo "tag: ${{ env.TAG }}"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push storybook
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  tags: |
                      ${{ env.REGISTRY }}/${{ env.STORYBOOK_IMAGE }}:${{ env.TAG }}
                      ${{ env.REGISTRY }}/${{ env.STORYBOOK_IMAGE }}:${{ github.run_number }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.STORYBOOK_IMAGE }}:${{ env.TAG }}
                  cache-to: type=inline
